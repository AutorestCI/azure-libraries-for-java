/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import org.joda.time.DateTime;
import com.microsoft.azure.servicefabric.BackupEntity;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Describes additional filters to be applied, while listing backups, and
 * backup storage details from where to fetch the backups.
 */
public class GetBackupByStorageQueryDescriptionInner {
    /**
     * Specifies the start date time in ISO8601 from which to enumerate
     * backups. If not specified, backups are enumerated from the beginning.
     */
    @JsonProperty(value = "StartDateTimeFilter")
    private DateTime startDateTimeFilter;

    /**
     * Specifies the end date time in ISO8601 till which to enumerate backups.
     * If not specified, backups are enumerated till the end.
     */
    @JsonProperty(value = "EndDateTimeFilter")
    private DateTime endDateTimeFilter;

    /**
     * If specified as true, gets the most recent backup (within the specified
     * time range) for every partition under the specified backup entity.
     */
    @JsonProperty(value = "Latest")
    private Boolean latest;

    /**
     * Describes the parameters for the backup storage from where to enumerate
     * backups. This is optional and by default backups are enumerated from the
     * backup storage where this backup entity is currently being backed up (as
     * specified in backup policy). This parameter is useful to be able to
     * enumerate backups from another cluster where you may intend to restore.
     */
    @JsonProperty(value = "Storage", required = true)
    private BackupStorageDescriptionInner storage;

    /**
     * Indicates the entity for which to enumerate backups.
     */
    @JsonProperty(value = "BackupEntity", required = true)
    private BackupEntity backupEntity;

    /**
     * Get the startDateTimeFilter value.
     *
     * @return the startDateTimeFilter value
     */
    public DateTime startDateTimeFilter() {
        return this.startDateTimeFilter;
    }

    /**
     * Set the startDateTimeFilter value.
     *
     * @param startDateTimeFilter the startDateTimeFilter value to set
     * @return the GetBackupByStorageQueryDescriptionInner object itself.
     */
    public GetBackupByStorageQueryDescriptionInner withStartDateTimeFilter(DateTime startDateTimeFilter) {
        this.startDateTimeFilter = startDateTimeFilter;
        return this;
    }

    /**
     * Get the endDateTimeFilter value.
     *
     * @return the endDateTimeFilter value
     */
    public DateTime endDateTimeFilter() {
        return this.endDateTimeFilter;
    }

    /**
     * Set the endDateTimeFilter value.
     *
     * @param endDateTimeFilter the endDateTimeFilter value to set
     * @return the GetBackupByStorageQueryDescriptionInner object itself.
     */
    public GetBackupByStorageQueryDescriptionInner withEndDateTimeFilter(DateTime endDateTimeFilter) {
        this.endDateTimeFilter = endDateTimeFilter;
        return this;
    }

    /**
     * Get the latest value.
     *
     * @return the latest value
     */
    public Boolean latest() {
        return this.latest;
    }

    /**
     * Set the latest value.
     *
     * @param latest the latest value to set
     * @return the GetBackupByStorageQueryDescriptionInner object itself.
     */
    public GetBackupByStorageQueryDescriptionInner withLatest(Boolean latest) {
        this.latest = latest;
        return this;
    }

    /**
     * Get the storage value.
     *
     * @return the storage value
     */
    public BackupStorageDescriptionInner storage() {
        return this.storage;
    }

    /**
     * Set the storage value.
     *
     * @param storage the storage value to set
     * @return the GetBackupByStorageQueryDescriptionInner object itself.
     */
    public GetBackupByStorageQueryDescriptionInner withStorage(BackupStorageDescriptionInner storage) {
        this.storage = storage;
        return this;
    }

    /**
     * Get the backupEntity value.
     *
     * @return the backupEntity value
     */
    public BackupEntity backupEntity() {
        return this.backupEntity;
    }

    /**
     * Set the backupEntity value.
     *
     * @param backupEntity the backupEntity value to set
     * @return the GetBackupByStorageQueryDescriptionInner object itself.
     */
    public GetBackupByStorageQueryDescriptionInner withBackupEntity(BackupEntity backupEntity) {
        this.backupEntity = backupEntity;
        return this;
    }

}
