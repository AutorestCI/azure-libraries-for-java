/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Information about how to copy image store content from one image store
 * relative path to another image store relative path.
 */
public class ImageStoreCopyDescriptionInner {
    /**
     * The relative path of source image store content to be copied from.
     */
    @JsonProperty(value = "RemoteSource", required = true)
    private String remoteSource;

    /**
     * The relative path of destination image store content to be copied to.
     */
    @JsonProperty(value = "RemoteDestination", required = true)
    private String remoteDestination;

    /**
     * The list of the file names to be skipped for copying.
     */
    @JsonProperty(value = "SkipFiles")
    private List<String> skipFiles;

    /**
     * Indicates whether to check mark file during copying. The property is
     * true if checking mark file is required, false otherwise. The mark file
     * is used to check whether the folder is well constructed. If the property
     * is true and mark file does not exist, the copy is skipped.
     */
    @JsonProperty(value = "CheckMarkFile")
    private Boolean checkMarkFile;

    /**
     * Get the remoteSource value.
     *
     * @return the remoteSource value
     */
    public String remoteSource() {
        return this.remoteSource;
    }

    /**
     * Set the remoteSource value.
     *
     * @param remoteSource the remoteSource value to set
     * @return the ImageStoreCopyDescriptionInner object itself.
     */
    public ImageStoreCopyDescriptionInner withRemoteSource(String remoteSource) {
        this.remoteSource = remoteSource;
        return this;
    }

    /**
     * Get the remoteDestination value.
     *
     * @return the remoteDestination value
     */
    public String remoteDestination() {
        return this.remoteDestination;
    }

    /**
     * Set the remoteDestination value.
     *
     * @param remoteDestination the remoteDestination value to set
     * @return the ImageStoreCopyDescriptionInner object itself.
     */
    public ImageStoreCopyDescriptionInner withRemoteDestination(String remoteDestination) {
        this.remoteDestination = remoteDestination;
        return this;
    }

    /**
     * Get the skipFiles value.
     *
     * @return the skipFiles value
     */
    public List<String> skipFiles() {
        return this.skipFiles;
    }

    /**
     * Set the skipFiles value.
     *
     * @param skipFiles the skipFiles value to set
     * @return the ImageStoreCopyDescriptionInner object itself.
     */
    public ImageStoreCopyDescriptionInner withSkipFiles(List<String> skipFiles) {
        this.skipFiles = skipFiles;
        return this;
    }

    /**
     * Get the checkMarkFile value.
     *
     * @return the checkMarkFile value
     */
    public Boolean checkMarkFile() {
        return this.checkMarkFile;
    }

    /**
     * Set the checkMarkFile value.
     *
     * @param checkMarkFile the checkMarkFile value to set
     * @return the ImageStoreCopyDescriptionInner object itself.
     */
    public ImageStoreCopyDescriptionInner withCheckMarkFile(Boolean checkMarkFile) {
        this.checkMarkFile = checkMarkFile;
        return this;
    }

}
