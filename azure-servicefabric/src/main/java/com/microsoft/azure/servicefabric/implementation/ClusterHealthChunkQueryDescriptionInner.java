/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import java.util.List;
import com.microsoft.azure.servicefabric.NodeHealthStateFilter;
import com.microsoft.azure.servicefabric.ApplicationHealthStateFilter;
import com.microsoft.azure.servicefabric.ApplicationHealthPolicies;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The cluster health chunk query description, which can specify the health
 * policies to evaluate cluster health and very expressive filters to select
 * which cluster entities to include in response.
 */
public class ClusterHealthChunkQueryDescriptionInner {
    /**
     * Defines a list of filters that specify which nodes to be included in the
     * returned cluster health chunk.
     * If no filters are specified, no nodes are returned. All the nodes are
     * used to evaluate the cluster's aggregated health state, regardless of
     * the input filters.
     * The cluster health chunk query may specify multiple node filters.
     * For example, it can specify a filter to return all nodes with health
     * state Error and another filter to always include a node identified by
     * its NodeName.
     */
    @JsonProperty(value = "NodeFilters")
    private List<NodeHealthStateFilter> nodeFilters;

    /**
     * Defines a list of filters that specify which applications to be included
     * in the returned cluster health chunk.
     * If no filters are specified, no applications are returned. All the
     * applications are used to evaluate the cluster's aggregated health state,
     * regardless of the input filters.
     * The cluster health chunk query may specify multiple application filters.
     * For example, it can specify a filter to return all applications with
     * health state Error and another filter to always include applications of
     * a specified application type.
     */
    @JsonProperty(value = "ApplicationFilters")
    private List<ApplicationHealthStateFilter> applicationFilters;

    /**
     * Defines a health policy used to evaluate the health of the cluster or of
     * a cluster node.
     */
    @JsonProperty(value = "ClusterHealthPolicy")
    private ClusterHealthPolicyInner clusterHealthPolicy;

    /**
     * Defines the application health policy map used to evaluate the health of
     * an application or one of its children entities.
     */
    @JsonProperty(value = "ApplicationHealthPolicies")
    private ApplicationHealthPolicies applicationHealthPolicies;

    /**
     * Get the nodeFilters value.
     *
     * @return the nodeFilters value
     */
    public List<NodeHealthStateFilter> nodeFilters() {
        return this.nodeFilters;
    }

    /**
     * Set the nodeFilters value.
     *
     * @param nodeFilters the nodeFilters value to set
     * @return the ClusterHealthChunkQueryDescriptionInner object itself.
     */
    public ClusterHealthChunkQueryDescriptionInner withNodeFilters(List<NodeHealthStateFilter> nodeFilters) {
        this.nodeFilters = nodeFilters;
        return this;
    }

    /**
     * Get the applicationFilters value.
     *
     * @return the applicationFilters value
     */
    public List<ApplicationHealthStateFilter> applicationFilters() {
        return this.applicationFilters;
    }

    /**
     * Set the applicationFilters value.
     *
     * @param applicationFilters the applicationFilters value to set
     * @return the ClusterHealthChunkQueryDescriptionInner object itself.
     */
    public ClusterHealthChunkQueryDescriptionInner withApplicationFilters(List<ApplicationHealthStateFilter> applicationFilters) {
        this.applicationFilters = applicationFilters;
        return this;
    }

    /**
     * Get the clusterHealthPolicy value.
     *
     * @return the clusterHealthPolicy value
     */
    public ClusterHealthPolicyInner clusterHealthPolicy() {
        return this.clusterHealthPolicy;
    }

    /**
     * Set the clusterHealthPolicy value.
     *
     * @param clusterHealthPolicy the clusterHealthPolicy value to set
     * @return the ClusterHealthChunkQueryDescriptionInner object itself.
     */
    public ClusterHealthChunkQueryDescriptionInner withClusterHealthPolicy(ClusterHealthPolicyInner clusterHealthPolicy) {
        this.clusterHealthPolicy = clusterHealthPolicy;
        return this;
    }

    /**
     * Get the applicationHealthPolicies value.
     *
     * @return the applicationHealthPolicies value
     */
    public ApplicationHealthPolicies applicationHealthPolicies() {
        return this.applicationHealthPolicies;
    }

    /**
     * Set the applicationHealthPolicies value.
     *
     * @param applicationHealthPolicies the applicationHealthPolicies value to set
     * @return the ClusterHealthChunkQueryDescriptionInner object itself.
     */
    public ClusterHealthChunkQueryDescriptionInner withApplicationHealthPolicies(ApplicationHealthPolicies applicationHealthPolicies) {
        this.applicationHealthPolicies = applicationHealthPolicies;
        return this;
    }

}
