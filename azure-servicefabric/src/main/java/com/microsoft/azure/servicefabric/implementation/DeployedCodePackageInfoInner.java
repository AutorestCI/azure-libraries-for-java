/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import com.microsoft.azure.servicefabric.HostType;
import com.microsoft.azure.servicefabric.HostIsolationMode;
import com.microsoft.azure.servicefabric.DeploymentStatus;
import com.microsoft.azure.servicefabric.CodePackageEntryPoint;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Information about code package deployed on a Service Fabric node.
 */
public class DeployedCodePackageInfoInner {
    /**
     * The name of the code package.
     */
    @JsonProperty(value = "Name")
    private String name;

    /**
     * The version of the code package specified in service manifest.
     */
    @JsonProperty(value = "Version")
    private String version;

    /**
     * The name of service manifest that specified this code package.
     */
    @JsonProperty(value = "ServiceManifestName")
    private String serviceManifestName;

    /**
     * The ActivationId of a deployed service package. If
     * ServicePackageActivationMode specified at the time of creating the
     * service
     * is 'SharedProcess' (or if it is not specified, in which case it defaults
     * to 'SharedProcess'), then value of ServicePackageActivationId
     * is always an empty string.
     */
    @JsonProperty(value = "ServicePackageActivationId")
    private String servicePackageActivationId;

    /**
     * Specifies the type of host for main entry point of a code package as
     * specified in service manifest. Possible values include: 'Invalid',
     * 'ExeHost', 'ContainerHost'.
     */
    @JsonProperty(value = "HostType")
    private HostType hostType;

    /**
     * Specifies the isolation mode of main entry point of a code package when
     * it's host type is ContainerHost. This is specified as part of container
     * host policies in application manifest while importing service manifest.
     * Possible values include: 'None', 'Process', 'HyperV'.
     */
    @JsonProperty(value = "HostIsolationMode")
    private HostIsolationMode hostIsolationMode;

    /**
     * Specifies the status of a deployed application or service package on a
     * Service Fabric node. Possible values include: 'Invalid', 'Downloading',
     * 'Activating', 'Active', 'Upgrading', 'Deactivating'.
     */
    @JsonProperty(value = "Status")
    private DeploymentStatus status;

    /**
     * The interval at which code package is run. This is used for periodic
     * code package.
     */
    @JsonProperty(value = "RunFrequencyInterval")
    private String runFrequencyInterval;

    /**
     * Information about setup or main entry point of a code package deployed
     * on a Service Fabric node.
     */
    @JsonProperty(value = "SetupEntryPoint")
    private CodePackageEntryPoint setupEntryPoint;

    /**
     * Information about setup or main entry point of a code package deployed
     * on a Service Fabric node.
     */
    @JsonProperty(value = "MainEntryPoint")
    private CodePackageEntryPoint mainEntryPoint;

    /**
     * Get the name value.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name value.
     *
     * @param name the name value to set
     * @return the DeployedCodePackageInfoInner object itself.
     */
    public DeployedCodePackageInfoInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the version value.
     *
     * @return the version value
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version value.
     *
     * @param version the version value to set
     * @return the DeployedCodePackageInfoInner object itself.
     */
    public DeployedCodePackageInfoInner withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the serviceManifestName value.
     *
     * @return the serviceManifestName value
     */
    public String serviceManifestName() {
        return this.serviceManifestName;
    }

    /**
     * Set the serviceManifestName value.
     *
     * @param serviceManifestName the serviceManifestName value to set
     * @return the DeployedCodePackageInfoInner object itself.
     */
    public DeployedCodePackageInfoInner withServiceManifestName(String serviceManifestName) {
        this.serviceManifestName = serviceManifestName;
        return this;
    }

    /**
     * Get the servicePackageActivationId value.
     *
     * @return the servicePackageActivationId value
     */
    public String servicePackageActivationId() {
        return this.servicePackageActivationId;
    }

    /**
     * Set the servicePackageActivationId value.
     *
     * @param servicePackageActivationId the servicePackageActivationId value to set
     * @return the DeployedCodePackageInfoInner object itself.
     */
    public DeployedCodePackageInfoInner withServicePackageActivationId(String servicePackageActivationId) {
        this.servicePackageActivationId = servicePackageActivationId;
        return this;
    }

    /**
     * Get the hostType value.
     *
     * @return the hostType value
     */
    public HostType hostType() {
        return this.hostType;
    }

    /**
     * Set the hostType value.
     *
     * @param hostType the hostType value to set
     * @return the DeployedCodePackageInfoInner object itself.
     */
    public DeployedCodePackageInfoInner withHostType(HostType hostType) {
        this.hostType = hostType;
        return this;
    }

    /**
     * Get the hostIsolationMode value.
     *
     * @return the hostIsolationMode value
     */
    public HostIsolationMode hostIsolationMode() {
        return this.hostIsolationMode;
    }

    /**
     * Set the hostIsolationMode value.
     *
     * @param hostIsolationMode the hostIsolationMode value to set
     * @return the DeployedCodePackageInfoInner object itself.
     */
    public DeployedCodePackageInfoInner withHostIsolationMode(HostIsolationMode hostIsolationMode) {
        this.hostIsolationMode = hostIsolationMode;
        return this;
    }

    /**
     * Get the status value.
     *
     * @return the status value
     */
    public DeploymentStatus status() {
        return this.status;
    }

    /**
     * Set the status value.
     *
     * @param status the status value to set
     * @return the DeployedCodePackageInfoInner object itself.
     */
    public DeployedCodePackageInfoInner withStatus(DeploymentStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the runFrequencyInterval value.
     *
     * @return the runFrequencyInterval value
     */
    public String runFrequencyInterval() {
        return this.runFrequencyInterval;
    }

    /**
     * Set the runFrequencyInterval value.
     *
     * @param runFrequencyInterval the runFrequencyInterval value to set
     * @return the DeployedCodePackageInfoInner object itself.
     */
    public DeployedCodePackageInfoInner withRunFrequencyInterval(String runFrequencyInterval) {
        this.runFrequencyInterval = runFrequencyInterval;
        return this;
    }

    /**
     * Get the setupEntryPoint value.
     *
     * @return the setupEntryPoint value
     */
    public CodePackageEntryPoint setupEntryPoint() {
        return this.setupEntryPoint;
    }

    /**
     * Set the setupEntryPoint value.
     *
     * @param setupEntryPoint the setupEntryPoint value to set
     * @return the DeployedCodePackageInfoInner object itself.
     */
    public DeployedCodePackageInfoInner withSetupEntryPoint(CodePackageEntryPoint setupEntryPoint) {
        this.setupEntryPoint = setupEntryPoint;
        return this;
    }

    /**
     * Get the mainEntryPoint value.
     *
     * @return the mainEntryPoint value
     */
    public CodePackageEntryPoint mainEntryPoint() {
        return this.mainEntryPoint;
    }

    /**
     * Set the mainEntryPoint value.
     *
     * @param mainEntryPoint the mainEntryPoint value to set
     * @return the DeployedCodePackageInfoInner object itself.
     */
    public DeployedCodePackageInfoInner withMainEntryPoint(CodePackageEntryPoint mainEntryPoint) {
        this.mainEntryPoint = mainEntryPoint;
        return this;
    }

}
