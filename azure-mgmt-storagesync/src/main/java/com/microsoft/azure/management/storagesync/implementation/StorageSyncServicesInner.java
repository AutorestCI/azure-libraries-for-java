/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagesync.implementation;

import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet;
import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.storagesync.ErrorException;
import com.microsoft.azure.management.storagesync.StorageSyncServicesDeleteHeaders;
import com.microsoft.azure.management.storagesync.StorageSyncServicesGetHeaders;
import com.microsoft.azure.management.storagesync.StorageSyncServicesUpdateHeaders;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in StorageSyncServices.
 */
public class StorageSyncServicesInner implements InnerSupportsGet<StorageSyncServiceInner>, InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private StorageSyncServicesService service;
    /** The service client containing this operation class. */
    private MicrosoftStorageSyncImpl client;

    /**
     * Initializes an instance of StorageSyncServicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public StorageSyncServicesInner(Retrofit retrofit, MicrosoftStorageSyncImpl client) {
        this.service = retrofit.create(StorageSyncServicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for StorageSyncServices to be
     * used by Retrofit to perform actually REST calls.
     */
    interface StorageSyncServicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.StorageSyncServices create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Query("api-version") String apiVersion, @Body StorageSyncServiceInner body, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.StorageSyncServices getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.StorageSyncServices update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Query("api-version") String apiVersion, @Body StorageSyncServiceInner body, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.StorageSyncServices delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Create a new StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param body Storage Sync Service resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageSyncServiceInner object if successful.
     */
    public StorageSyncServiceInner create(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceInner body) {
        return createWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, body).toBlocking().single().body();
    }

    /**
     * Create a new StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param body Storage Sync Service resource name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageSyncServiceInner> createAsync(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceInner body, final ServiceCallback<StorageSyncServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, body), serviceCallback);
    }

    /**
     * Create a new StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param body Storage Sync Service resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<StorageSyncServiceInner> createAsync(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceInner body) {
        return createWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, body).map(new Func1<ServiceResponse<StorageSyncServiceInner>, StorageSyncServiceInner>() {
            @Override
            public StorageSyncServiceInner call(ServiceResponse<StorageSyncServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a new StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param body Storage Sync Service resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<ServiceResponse<StorageSyncServiceInner>> createWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceInner body) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        Validator.validate(body);
        return service.create(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, this.client.apiVersion(), body, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StorageSyncServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<StorageSyncServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StorageSyncServiceInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StorageSyncServiceInner> createDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StorageSyncServiceInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StorageSyncServiceInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageSyncServiceInner object if successful.
     */
    public StorageSyncServiceInner getByResourceGroup(String resourceGroupName, String storageSyncServiceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, storageSyncServiceName).toBlocking().single().body();
    }

    /**
     * Get a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageSyncServiceInner> getByResourceGroupAsync(String resourceGroupName, String storageSyncServiceName, final ServiceCallback<StorageSyncServiceInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, storageSyncServiceName), serviceCallback);
    }

    /**
     * Get a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<StorageSyncServiceInner> getByResourceGroupAsync(String resourceGroupName, String storageSyncServiceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, storageSyncServiceName).map(new Func1<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesGetHeaders>, StorageSyncServiceInner>() {
            @Override
            public StorageSyncServiceInner call(ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesGetHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesGetHeaders>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesGetHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesGetHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesGetHeaders> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesGetHeaders> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StorageSyncServiceInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StorageSyncServiceInner>() { }.getType())
                .registerError(ErrorException.class)
                .buildWithHeaders(response, StorageSyncServicesGetHeaders.class);
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageSyncServiceInner object if successful.
     */
    public StorageSyncServiceInner update(String resourceGroupName, String storageSyncServiceName) {
        return updateWithServiceResponseAsync(resourceGroupName, storageSyncServiceName).toBlocking().single().body();
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageSyncServiceInner> updateAsync(String resourceGroupName, String storageSyncServiceName, final ServiceCallback<StorageSyncServiceInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(updateWithServiceResponseAsync(resourceGroupName, storageSyncServiceName), serviceCallback);
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<StorageSyncServiceInner> updateAsync(String resourceGroupName, String storageSyncServiceName) {
        return updateWithServiceResponseAsync(resourceGroupName, storageSyncServiceName).map(new Func1<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>, StorageSyncServiceInner>() {
            @Override
            public StorageSyncServiceInner call(ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>> updateWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final StorageSyncServiceInner body = null;
        return service.update(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, this.client.apiVersion(), body, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param body Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageSyncServiceInner object if successful.
     */
    public StorageSyncServiceInner update(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceInner body) {
        return updateWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, body).toBlocking().single().body();
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param body Storage Sync Service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageSyncServiceInner> updateAsync(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceInner body, final ServiceCallback<StorageSyncServiceInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(updateWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, body), serviceCallback);
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param body Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<StorageSyncServiceInner> updateAsync(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceInner body) {
        return updateWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, body).map(new Func1<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>, StorageSyncServiceInner>() {
            @Override
            public StorageSyncServiceInner call(ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param body Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>> updateWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceInner body) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(body);
        return service.update(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, this.client.apiVersion(), body, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders> updateDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StorageSyncServiceInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StorageSyncServiceInner>() { }.getType())
                .registerError(ErrorException.class)
                .buildWithHeaders(response, StorageSyncServicesUpdateHeaders.class);
    }

    /**
     * Delete a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String storageSyncServiceName) {
        deleteWithServiceResponseAsync(resourceGroupName, storageSyncServiceName).toBlocking().single().body();
    }

    /**
     * Delete a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String storageSyncServiceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(deleteWithServiceResponseAsync(resourceGroupName, storageSyncServiceName), serviceCallback);
    }

    /**
     * Delete a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String storageSyncServiceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, storageSyncServiceName).map(new Func1<ServiceResponseWithHeaders<Void, StorageSyncServicesDeleteHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, StorageSyncServicesDeleteHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, StorageSyncServicesDeleteHeaders>> deleteWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, StorageSyncServicesDeleteHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, StorageSyncServicesDeleteHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, StorageSyncServicesDeleteHeaders> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, StorageSyncServicesDeleteHeaders> deleteDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .buildWithHeaders(response, StorageSyncServicesDeleteHeaders.class);
    }

}
