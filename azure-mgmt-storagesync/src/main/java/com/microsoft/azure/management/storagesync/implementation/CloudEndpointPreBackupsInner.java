/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagesync.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.storagesync.BackupRequest;
import com.microsoft.azure.management.storagesync.CloudEndpointPreBackupPostHeaders;
import com.microsoft.azure.management.storagesync.ErrorException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in CloudEndpointPreBackups.
 */
public class CloudEndpointPreBackupsInner {
    /** The Retrofit service to perform REST calls. */
    private CloudEndpointPreBackupsService service;
    /** The service client containing this operation class. */
    private MicrosoftStorageSyncImpl client;

    /**
     * Initializes an instance of CloudEndpointPreBackupsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CloudEndpointPreBackupsInner(Retrofit retrofit, MicrosoftStorageSyncImpl client) {
        this.service = retrofit.create(CloudEndpointPreBackupsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for CloudEndpointPreBackups to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CloudEndpointPreBackupsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.CloudEndpointPreBackups post" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prebackup")
        Observable<Response<ResponseBody>> post(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Path("syncGroupName") String syncGroupName, @Path("cloudEndpointName") String cloudEndpointName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body BackupRequest body, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.CloudEndpointPreBackups beginPost" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prebackup")
        Observable<Response<ResponseBody>> beginPost(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Path("syncGroupName") String syncGroupName, @Path("cloudEndpointName") String cloudEndpointName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body BackupRequest body, @Header("User-Agent") String userAgent);

    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void post(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        postWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName).toBlocking().last().body();
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> postAsync(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(postWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName), serviceCallback);
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> postAsync(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        return postWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName).map(new Func1<ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders>> postWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (syncGroupName == null) {
            throw new IllegalArgumentException("Parameter syncGroupName is required and cannot be null.");
        }
        if (cloudEndpointName == null) {
            throw new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String azureFileShare = null;
        BackupRequest body = new BackupRequest();
        body.withAzureFileShare(null);
        Observable<Response<ResponseBody>> observable = service.post(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, this.client.apiVersion(), this.client.acceptLanguage(), body, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<Void>() { }.getType(), CloudEndpointPreBackupPostHeaders.class);
    }
    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param azureFileShare Azure File Share.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void post(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName, String azureFileShare) {
        postWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, azureFileShare).toBlocking().last().body();
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param azureFileShare Azure File Share.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> postAsync(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName, String azureFileShare, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(postWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, azureFileShare), serviceCallback);
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param azureFileShare Azure File Share.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> postAsync(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName, String azureFileShare) {
        return postWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, azureFileShare).map(new Func1<ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param azureFileShare Azure File Share.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders>> postWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName, String azureFileShare) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (syncGroupName == null) {
            throw new IllegalArgumentException("Parameter syncGroupName is required and cannot be null.");
        }
        if (cloudEndpointName == null) {
            throw new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        BackupRequest body = new BackupRequest();
        body.withAzureFileShare(azureFileShare);
        Observable<Response<ResponseBody>> observable = service.post(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, this.client.apiVersion(), this.client.acceptLanguage(), body, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<Void>() { }.getType(), CloudEndpointPreBackupPostHeaders.class);
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginPost(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        beginPostWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName).toBlocking().single().body();
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginPostAsync(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginPostWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName), serviceCallback);
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> beginPostAsync(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        return beginPostWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName).map(new Func1<ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders>> beginPostWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (syncGroupName == null) {
            throw new IllegalArgumentException("Parameter syncGroupName is required and cannot be null.");
        }
        if (cloudEndpointName == null) {
            throw new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String azureFileShare = null;
        BackupRequest body = new BackupRequest();
        body.withAzureFileShare(null);
        return service.beginPost(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, this.client.apiVersion(), this.client.acceptLanguage(), body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders> clientResponse = beginPostDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param azureFileShare Azure File Share.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginPost(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName, String azureFileShare) {
        beginPostWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, azureFileShare).toBlocking().single().body();
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param azureFileShare Azure File Share.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginPostAsync(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName, String azureFileShare, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginPostWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, azureFileShare), serviceCallback);
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param azureFileShare Azure File Share.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> beginPostAsync(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName, String azureFileShare) {
        return beginPostWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, azureFileShare).map(new Func1<ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param azureFileShare Azure File Share.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders>> beginPostWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName, String azureFileShare) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (syncGroupName == null) {
            throw new IllegalArgumentException("Parameter syncGroupName is required and cannot be null.");
        }
        if (cloudEndpointName == null) {
            throw new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        BackupRequest body = new BackupRequest();
        body.withAzureFileShare(azureFileShare);
        return service.beginPost(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, this.client.apiVersion(), this.client.acceptLanguage(), body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders> clientResponse = beginPostDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, CloudEndpointPreBackupPostHeaders> beginPostDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .buildWithHeaders(response, CloudEndpointPreBackupPostHeaders.class);
    }

}
