/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servermanagement;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Expanded gateway status information.
 */
public class GatewayStatus {
    /**
     * The available memory on the gateway host machine in megabytes.
     */
    @JsonProperty(value = "availableMemoryMByte")
    private Double availableMemoryMByte;

    /**
     * The CPU utilization of the gateway process (numeric value between 0 and
     * 100).
     */
    @JsonProperty(value = "gatewayCpuUtilizationPercent")
    private Double gatewayCpuUtilizationPercent;

    /**
     * CPU Utilization of the whole system.
     */
    @JsonProperty(value = "totalCpuUtilizationPercent")
    private Double totalCpuUtilizationPercent;

    /**
     * The version of the gateway that is installed on the system.
     */
    @JsonProperty(value = "gatewayVersion")
    private String gatewayVersion;

    /**
     * The Plaintext description of the OS on the gateway.
     */
    @JsonProperty(value = "friendlyOsName")
    private String friendlyOsName;

    /**
     * The date the gateway was installed.
     */
    @JsonProperty(value = "installedDate")
    private DateTime installedDate;

    /**
     * Number of logical processors in the gateway system.
     */
    @JsonProperty(value = "logicalProcessorCount")
    private Integer logicalProcessorCount;

    /**
     * The computer name of the gateway system.
     */
    @JsonProperty(value = "name")
    private String name;

    /**
     * The gateway resource ID.
     */
    @JsonProperty(value = "gatewayId")
    private String gatewayId;

    /**
     * The working set size of the gateway process in megabytes.
     */
    @JsonProperty(value = "gatewayWorkingSetMByte")
    private Double gatewayWorkingSetMByte;

    /**
     * UTC date and time when gateway status was last updated.
     */
    @JsonProperty(value = "statusUpdated")
    private DateTime statusUpdated;

    /**
     * The group policy error.
     */
    @JsonProperty(value = "groupPolicyError")
    private String groupPolicyError;

    /**
     * Status of the allowGatewayGroupPolicy setting.
     */
    @JsonProperty(value = "allowGatewayGroupPolicyStatus")
    private Boolean allowGatewayGroupPolicyStatus;

    /**
     * Status of the requireMfaGroupPolicy setting.
     */
    @JsonProperty(value = "requireMfaGroupPolicyStatus")
    private Boolean requireMfaGroupPolicyStatus;

    /**
     * Thumbprint of the encryption certificate.
     */
    @JsonProperty(value = "encryptionCertificateThumbprint")
    private String encryptionCertificateThumbprint;

    /**
     * Secondary thumbprint of the encryption certificate.
     */
    @JsonProperty(value = "secondaryEncryptionCertificateThumbprint")
    private String secondaryEncryptionCertificateThumbprint;

    /**
     * The encryption certificate key.
     */
    @JsonProperty(value = "encryptionJwk")
    private EncryptionJwkResource encryptionJwk;

    /**
     * The secondary encryption certificate key.
     */
    @JsonProperty(value = "secondaryEncryptionJwk")
    private EncryptionJwkResource secondaryEncryptionJwk;

    /**
     * Active message count.
     */
    @JsonProperty(value = "activeMessageCount")
    private Integer activeMessageCount;

    /**
     * Latest published version of the gateway install MSI.
     */
    @JsonProperty(value = "latestPublishedMsiVersion")
    private String latestPublishedMsiVersion;

    /**
     * Gateway install MSI published time.
     */
    @JsonProperty(value = "publishedTimeUtc")
    private DateTime publishedTimeUtc;

    /**
     * Get the available memory on the gateway host machine in megabytes.
     *
     * @return the availableMemoryMByte value
     */
    public Double availableMemoryMByte() {
        return this.availableMemoryMByte;
    }

    /**
     * Set the available memory on the gateway host machine in megabytes.
     *
     * @param availableMemoryMByte the availableMemoryMByte value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withAvailableMemoryMByte(Double availableMemoryMByte) {
        this.availableMemoryMByte = availableMemoryMByte;
        return this;
    }

    /**
     * Get the CPU utilization of the gateway process (numeric value between 0 and 100).
     *
     * @return the gatewayCpuUtilizationPercent value
     */
    public Double gatewayCpuUtilizationPercent() {
        return this.gatewayCpuUtilizationPercent;
    }

    /**
     * Set the CPU utilization of the gateway process (numeric value between 0 and 100).
     *
     * @param gatewayCpuUtilizationPercent the gatewayCpuUtilizationPercent value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withGatewayCpuUtilizationPercent(Double gatewayCpuUtilizationPercent) {
        this.gatewayCpuUtilizationPercent = gatewayCpuUtilizationPercent;
        return this;
    }

    /**
     * Get cPU Utilization of the whole system.
     *
     * @return the totalCpuUtilizationPercent value
     */
    public Double totalCpuUtilizationPercent() {
        return this.totalCpuUtilizationPercent;
    }

    /**
     * Set cPU Utilization of the whole system.
     *
     * @param totalCpuUtilizationPercent the totalCpuUtilizationPercent value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withTotalCpuUtilizationPercent(Double totalCpuUtilizationPercent) {
        this.totalCpuUtilizationPercent = totalCpuUtilizationPercent;
        return this;
    }

    /**
     * Get the version of the gateway that is installed on the system.
     *
     * @return the gatewayVersion value
     */
    public String gatewayVersion() {
        return this.gatewayVersion;
    }

    /**
     * Set the version of the gateway that is installed on the system.
     *
     * @param gatewayVersion the gatewayVersion value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withGatewayVersion(String gatewayVersion) {
        this.gatewayVersion = gatewayVersion;
        return this;
    }

    /**
     * Get the Plaintext description of the OS on the gateway.
     *
     * @return the friendlyOsName value
     */
    public String friendlyOsName() {
        return this.friendlyOsName;
    }

    /**
     * Set the Plaintext description of the OS on the gateway.
     *
     * @param friendlyOsName the friendlyOsName value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withFriendlyOsName(String friendlyOsName) {
        this.friendlyOsName = friendlyOsName;
        return this;
    }

    /**
     * Get the date the gateway was installed.
     *
     * @return the installedDate value
     */
    public DateTime installedDate() {
        return this.installedDate;
    }

    /**
     * Set the date the gateway was installed.
     *
     * @param installedDate the installedDate value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withInstalledDate(DateTime installedDate) {
        this.installedDate = installedDate;
        return this;
    }

    /**
     * Get number of logical processors in the gateway system.
     *
     * @return the logicalProcessorCount value
     */
    public Integer logicalProcessorCount() {
        return this.logicalProcessorCount;
    }

    /**
     * Set number of logical processors in the gateway system.
     *
     * @param logicalProcessorCount the logicalProcessorCount value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withLogicalProcessorCount(Integer logicalProcessorCount) {
        this.logicalProcessorCount = logicalProcessorCount;
        return this;
    }

    /**
     * Get the computer name of the gateway system.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the computer name of the gateway system.
     *
     * @param name the name value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the gateway resource ID.
     *
     * @return the gatewayId value
     */
    public String gatewayId() {
        return this.gatewayId;
    }

    /**
     * Set the gateway resource ID.
     *
     * @param gatewayId the gatewayId value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withGatewayId(String gatewayId) {
        this.gatewayId = gatewayId;
        return this;
    }

    /**
     * Get the working set size of the gateway process in megabytes.
     *
     * @return the gatewayWorkingSetMByte value
     */
    public Double gatewayWorkingSetMByte() {
        return this.gatewayWorkingSetMByte;
    }

    /**
     * Set the working set size of the gateway process in megabytes.
     *
     * @param gatewayWorkingSetMByte the gatewayWorkingSetMByte value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withGatewayWorkingSetMByte(Double gatewayWorkingSetMByte) {
        this.gatewayWorkingSetMByte = gatewayWorkingSetMByte;
        return this;
    }

    /**
     * Get uTC date and time when gateway status was last updated.
     *
     * @return the statusUpdated value
     */
    public DateTime statusUpdated() {
        return this.statusUpdated;
    }

    /**
     * Set uTC date and time when gateway status was last updated.
     *
     * @param statusUpdated the statusUpdated value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withStatusUpdated(DateTime statusUpdated) {
        this.statusUpdated = statusUpdated;
        return this;
    }

    /**
     * Get the group policy error.
     *
     * @return the groupPolicyError value
     */
    public String groupPolicyError() {
        return this.groupPolicyError;
    }

    /**
     * Set the group policy error.
     *
     * @param groupPolicyError the groupPolicyError value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withGroupPolicyError(String groupPolicyError) {
        this.groupPolicyError = groupPolicyError;
        return this;
    }

    /**
     * Get status of the allowGatewayGroupPolicy setting.
     *
     * @return the allowGatewayGroupPolicyStatus value
     */
    public Boolean allowGatewayGroupPolicyStatus() {
        return this.allowGatewayGroupPolicyStatus;
    }

    /**
     * Set status of the allowGatewayGroupPolicy setting.
     *
     * @param allowGatewayGroupPolicyStatus the allowGatewayGroupPolicyStatus value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withAllowGatewayGroupPolicyStatus(Boolean allowGatewayGroupPolicyStatus) {
        this.allowGatewayGroupPolicyStatus = allowGatewayGroupPolicyStatus;
        return this;
    }

    /**
     * Get status of the requireMfaGroupPolicy setting.
     *
     * @return the requireMfaGroupPolicyStatus value
     */
    public Boolean requireMfaGroupPolicyStatus() {
        return this.requireMfaGroupPolicyStatus;
    }

    /**
     * Set status of the requireMfaGroupPolicy setting.
     *
     * @param requireMfaGroupPolicyStatus the requireMfaGroupPolicyStatus value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withRequireMfaGroupPolicyStatus(Boolean requireMfaGroupPolicyStatus) {
        this.requireMfaGroupPolicyStatus = requireMfaGroupPolicyStatus;
        return this;
    }

    /**
     * Get thumbprint of the encryption certificate.
     *
     * @return the encryptionCertificateThumbprint value
     */
    public String encryptionCertificateThumbprint() {
        return this.encryptionCertificateThumbprint;
    }

    /**
     * Set thumbprint of the encryption certificate.
     *
     * @param encryptionCertificateThumbprint the encryptionCertificateThumbprint value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withEncryptionCertificateThumbprint(String encryptionCertificateThumbprint) {
        this.encryptionCertificateThumbprint = encryptionCertificateThumbprint;
        return this;
    }

    /**
     * Get secondary thumbprint of the encryption certificate.
     *
     * @return the secondaryEncryptionCertificateThumbprint value
     */
    public String secondaryEncryptionCertificateThumbprint() {
        return this.secondaryEncryptionCertificateThumbprint;
    }

    /**
     * Set secondary thumbprint of the encryption certificate.
     *
     * @param secondaryEncryptionCertificateThumbprint the secondaryEncryptionCertificateThumbprint value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withSecondaryEncryptionCertificateThumbprint(String secondaryEncryptionCertificateThumbprint) {
        this.secondaryEncryptionCertificateThumbprint = secondaryEncryptionCertificateThumbprint;
        return this;
    }

    /**
     * Get the encryption certificate key.
     *
     * @return the encryptionJwk value
     */
    public EncryptionJwkResource encryptionJwk() {
        return this.encryptionJwk;
    }

    /**
     * Set the encryption certificate key.
     *
     * @param encryptionJwk the encryptionJwk value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withEncryptionJwk(EncryptionJwkResource encryptionJwk) {
        this.encryptionJwk = encryptionJwk;
        return this;
    }

    /**
     * Get the secondary encryption certificate key.
     *
     * @return the secondaryEncryptionJwk value
     */
    public EncryptionJwkResource secondaryEncryptionJwk() {
        return this.secondaryEncryptionJwk;
    }

    /**
     * Set the secondary encryption certificate key.
     *
     * @param secondaryEncryptionJwk the secondaryEncryptionJwk value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withSecondaryEncryptionJwk(EncryptionJwkResource secondaryEncryptionJwk) {
        this.secondaryEncryptionJwk = secondaryEncryptionJwk;
        return this;
    }

    /**
     * Get active message count.
     *
     * @return the activeMessageCount value
     */
    public Integer activeMessageCount() {
        return this.activeMessageCount;
    }

    /**
     * Set active message count.
     *
     * @param activeMessageCount the activeMessageCount value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withActiveMessageCount(Integer activeMessageCount) {
        this.activeMessageCount = activeMessageCount;
        return this;
    }

    /**
     * Get latest published version of the gateway install MSI.
     *
     * @return the latestPublishedMsiVersion value
     */
    public String latestPublishedMsiVersion() {
        return this.latestPublishedMsiVersion;
    }

    /**
     * Set latest published version of the gateway install MSI.
     *
     * @param latestPublishedMsiVersion the latestPublishedMsiVersion value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withLatestPublishedMsiVersion(String latestPublishedMsiVersion) {
        this.latestPublishedMsiVersion = latestPublishedMsiVersion;
        return this;
    }

    /**
     * Get gateway install MSI published time.
     *
     * @return the publishedTimeUtc value
     */
    public DateTime publishedTimeUtc() {
        return this.publishedTimeUtc;
    }

    /**
     * Set gateway install MSI published time.
     *
     * @param publishedTimeUtc the publishedTimeUtc value to set
     * @return the GatewayStatus object itself.
     */
    public GatewayStatus withPublishedTimeUtc(DateTime publishedTimeUtc) {
        this.publishedTimeUtc = publishedTimeUtc;
        return this;
    }

}
