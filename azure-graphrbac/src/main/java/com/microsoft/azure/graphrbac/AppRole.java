/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.graphrbac;

import java.util.Map;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents an application role that may be requested by a client application
 * calling another application or that may be used to assign an application to
 * users or groups in a specified application role. The appRoles property of
 * the servicePrincipal entity and of the application entity is a collection of
 * appRole.
 */
public class AppRole {
    /**
     * Unmatched properties from the message are deserialized this collection.
     */
    @JsonProperty(value = "")
    private Map<String, Object> additionalProperties;

    /**
     * Specifies whether this app role definition can be assigned to users and
     * groups by setting to "User", or to other applications by setting to
     * "Application", or to both.
     */
    @JsonProperty(value = "allowedMemberTypes")
    private List<String> allowedMemberTypes;

    /**
     * Permission help text that appears in the admin app assignment and
     * consent experiences.
     */
    @JsonProperty(value = "description")
    private String description;

    /**
     * Display name for the permission that appears in the admin consent and
     * app assignment experiences. For example, "Read Only" or "Admin".
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /**
     * Unique role identifier inside the appRoles collection, such as
     * "c20e145e-5459-4a6c-a074-b942bbd4cfe1".
     */
    @JsonProperty(value = "id")
    private String id;

    /**
     * When creating or updating a role definition, this must be set to true
     * (which is the default). To delete a role, this must first be set to
     * false.
     */
    @JsonProperty(value = "isEnabled")
    private Boolean isEnabled;

    /**
     * Specifies the value of the roles claim that the application should
     * expect in the authentication and access tokens, such as "ReadOnly" or
     * "Admin".
     */
    @JsonProperty(value = "value")
    private String value;

    /**
     * Get unmatched properties from the message are deserialized this collection.
     *
     * @return the additionalProperties value
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set unmatched properties from the message are deserialized this collection.
     *
     * @param additionalProperties the additionalProperties value to set
     * @return the AppRole object itself.
     */
    public AppRole withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Get specifies whether this app role definition can be assigned to users and groups by setting to "User", or to other applications by setting to "Application", or to both.
     *
     * @return the allowedMemberTypes value
     */
    public List<String> allowedMemberTypes() {
        return this.allowedMemberTypes;
    }

    /**
     * Set specifies whether this app role definition can be assigned to users and groups by setting to "User", or to other applications by setting to "Application", or to both.
     *
     * @param allowedMemberTypes the allowedMemberTypes value to set
     * @return the AppRole object itself.
     */
    public AppRole withAllowedMemberTypes(List<String> allowedMemberTypes) {
        this.allowedMemberTypes = allowedMemberTypes;
        return this;
    }

    /**
     * Get permission help text that appears in the admin app assignment and consent experiences.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set permission help text that appears in the admin app assignment and consent experiences.
     *
     * @param description the description value to set
     * @return the AppRole object itself.
     */
    public AppRole withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get display name for the permission that appears in the admin consent and app assignment experiences. For example, "Read Only" or "Admin".
     *
     * @return the displayName value
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set display name for the permission that appears in the admin consent and app assignment experiences. For example, "Read Only" or "Admin".
     *
     * @param displayName the displayName value to set
     * @return the AppRole object itself.
     */
    public AppRole withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get unique role identifier inside the appRoles collection, such as "c20e145e-5459-4a6c-a074-b942bbd4cfe1".
     *
     * @return the id value
     */
    public String id() {
        return this.id;
    }

    /**
     * Set unique role identifier inside the appRoles collection, such as "c20e145e-5459-4a6c-a074-b942bbd4cfe1".
     *
     * @param id the id value to set
     * @return the AppRole object itself.
     */
    public AppRole withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get when creating or updating a role definition, this must be set to true (which is the default). To delete a role, this must first be set to false.
     *
     * @return the isEnabled value
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }

    /**
     * Set when creating or updating a role definition, this must be set to true (which is the default). To delete a role, this must first be set to false.
     *
     * @param isEnabled the isEnabled value to set
     * @return the AppRole object itself.
     */
    public AppRole withIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
        return this;
    }

    /**
     * Get specifies the value of the roles claim that the application should expect in the authentication and access tokens, such as "ReadOnly" or "Admin".
     *
     * @return the value value
     */
    public String value() {
        return this.value;
    }

    /**
     * Set specifies the value of the roles claim that the application should expect in the authentication and access tokens, such as "ReadOnly" or "Admin".
     *
     * @param value the value value to set
     * @return the AppRole object itself.
     */
    public AppRole withValue(String value) {
        this.value = value;
        return this;
    }

}
