/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.monitor.implementation;

import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureClient;
import com.microsoft.azure.AzureServiceClient;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.credentials.ServiceClientCredentials;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the MonitorManagementClientImpl class.
 */
public class MonitorManagementClientImpl extends AzureServiceClient {
    /** The Retrofit service to perform REST calls. */
    private MonitorManagementClientService service;
    /** the {@link AzureClient} used for long running operations. */
    private AzureClient azureClient;

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    public AzureClient getAzureClient() {
        return this.azureClient;
    }

    /** The Azure subscription Id. */
    private String subscriptionId;

    /**
     * Gets The Azure subscription Id.
     *
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Sets The Azure subscription Id.
     *
     * @param subscriptionId the subscriptionId value.
     * @return the service client itself
     */
    public MonitorManagementClientImpl withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /** Gets or sets the preferred language for the response. */
    private String acceptLanguage;

    /**
     * Gets Gets or sets the preferred language for the response.
     *
     * @return the acceptLanguage value.
     */
    public String acceptLanguage() {
        return this.acceptLanguage;
    }

    /**
     * Sets Gets or sets the preferred language for the response.
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    public MonitorManagementClientImpl withAcceptLanguage(String acceptLanguage) {
        this.acceptLanguage = acceptLanguage;
        return this;
    }

    /** Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30. */
    private int longRunningOperationRetryTimeout;

    /**
     * Gets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    public int longRunningOperationRetryTimeout() {
        return this.longRunningOperationRetryTimeout;
    }

    /**
     * Sets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    public MonitorManagementClientImpl withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout) {
        this.longRunningOperationRetryTimeout = longRunningOperationRetryTimeout;
        return this;
    }

    /** When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true. */
    private boolean generateClientRequestId;

    /**
     * Gets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @return the generateClientRequestId value.
     */
    public boolean generateClientRequestId() {
        return this.generateClientRequestId;
    }

    /**
     * Sets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    public MonitorManagementClientImpl withGenerateClientRequestId(boolean generateClientRequestId) {
        this.generateClientRequestId = generateClientRequestId;
        return this;
    }

    /**
     * The AutoscaleSettingsInner object to access its operations.
     */
    private AutoscaleSettingsInner autoscaleSettings;

    /**
     * Gets the AutoscaleSettingsInner object to access its operations.
     * @return the AutoscaleSettingsInner object.
     */
    public AutoscaleSettingsInner autoscaleSettings() {
        return this.autoscaleSettings;
    }

    /**
     * The OperationsInner object to access its operations.
     */
    private OperationsInner operations;

    /**
     * Gets the OperationsInner object to access its operations.
     * @return the OperationsInner object.
     */
    public OperationsInner operations() {
        return this.operations;
    }

    /**
     * The AlertRuleIncidentsInner object to access its operations.
     */
    private AlertRuleIncidentsInner alertRuleIncidents;

    /**
     * Gets the AlertRuleIncidentsInner object to access its operations.
     * @return the AlertRuleIncidentsInner object.
     */
    public AlertRuleIncidentsInner alertRuleIncidents() {
        return this.alertRuleIncidents;
    }

    /**
     * The AlertRulesInner object to access its operations.
     */
    private AlertRulesInner alertRules;

    /**
     * Gets the AlertRulesInner object to access its operations.
     * @return the AlertRulesInner object.
     */
    public AlertRulesInner alertRules() {
        return this.alertRules;
    }

    /**
     * The LogProfilesInner object to access its operations.
     */
    private LogProfilesInner logProfiles;

    /**
     * Gets the LogProfilesInner object to access its operations.
     * @return the LogProfilesInner object.
     */
    public LogProfilesInner logProfiles() {
        return this.logProfiles;
    }

    /**
     * The DiagnosticSettingsInner object to access its operations.
     */
    private DiagnosticSettingsInner diagnosticSettings;

    /**
     * Gets the DiagnosticSettingsInner object to access its operations.
     * @return the DiagnosticSettingsInner object.
     */
    public DiagnosticSettingsInner diagnosticSettings() {
        return this.diagnosticSettings;
    }

    /**
     * The DiagnosticSettingsCategorysInner object to access its operations.
     */
    private DiagnosticSettingsCategorysInner diagnosticSettingsCategorys;

    /**
     * Gets the DiagnosticSettingsCategorysInner object to access its operations.
     * @return the DiagnosticSettingsCategorysInner object.
     */
    public DiagnosticSettingsCategorysInner diagnosticSettingsCategorys() {
        return this.diagnosticSettingsCategorys;
    }

    /**
     * The ActionGroupsInner object to access its operations.
     */
    private ActionGroupsInner actionGroups;

    /**
     * Gets the ActionGroupsInner object to access its operations.
     * @return the ActionGroupsInner object.
     */
    public ActionGroupsInner actionGroups() {
        return this.actionGroups;
    }

    /**
     * The ActivityLogAlertsInner object to access its operations.
     */
    private ActivityLogAlertsInner activityLogAlerts;

    /**
     * Gets the ActivityLogAlertsInner object to access its operations.
     * @return the ActivityLogAlertsInner object.
     */
    public ActivityLogAlertsInner activityLogAlerts() {
        return this.activityLogAlerts;
    }

    /**
     * The ActivityLogsInner object to access its operations.
     */
    private ActivityLogsInner activityLogs;

    /**
     * Gets the ActivityLogsInner object to access its operations.
     * @return the ActivityLogsInner object.
     */
    public ActivityLogsInner activityLogs() {
        return this.activityLogs;
    }

    /**
     * The EventCategoriesInner object to access its operations.
     */
    private EventCategoriesInner eventCategories;

    /**
     * Gets the EventCategoriesInner object to access its operations.
     * @return the EventCategoriesInner object.
     */
    public EventCategoriesInner eventCategories() {
        return this.eventCategories;
    }

    /**
     * The TenantActivityLogsInner object to access its operations.
     */
    private TenantActivityLogsInner tenantActivityLogs;

    /**
     * Gets the TenantActivityLogsInner object to access its operations.
     * @return the TenantActivityLogsInner object.
     */
    public TenantActivityLogsInner tenantActivityLogs() {
        return this.tenantActivityLogs;
    }

    /**
     * The MetricDefinitionsInner object to access its operations.
     */
    private MetricDefinitionsInner metricDefinitions;

    /**
     * Gets the MetricDefinitionsInner object to access its operations.
     * @return the MetricDefinitionsInner object.
     */
    public MetricDefinitionsInner metricDefinitions() {
        return this.metricDefinitions;
    }

    /**
     * The MetricsInner object to access its operations.
     */
    private MetricsInner metrics;

    /**
     * Gets the MetricsInner object to access its operations.
     * @return the MetricsInner object.
     */
    public MetricsInner metrics() {
        return this.metrics;
    }

    /**
     * The MetricBaselinesInner object to access its operations.
     */
    private MetricBaselinesInner metricBaselines;

    /**
     * Gets the MetricBaselinesInner object to access its operations.
     * @return the MetricBaselinesInner object.
     */
    public MetricBaselinesInner metricBaselines() {
        return this.metricBaselines;
    }

    /**
     * The MetricAlertsInner object to access its operations.
     */
    private MetricAlertsInner metricAlerts;

    /**
     * Gets the MetricAlertsInner object to access its operations.
     * @return the MetricAlertsInner object.
     */
    public MetricAlertsInner metricAlerts() {
        return this.metricAlerts;
    }

    /**
     * The MetricAlertsStatusInner object to access its operations.
     */
    private MetricAlertsStatusInner metricAlertsStatus;

    /**
     * Gets the MetricAlertsStatusInner object to access its operations.
     * @return the MetricAlertsStatusInner object.
     */
    public MetricAlertsStatusInner metricAlertsStatus() {
        return this.metricAlertsStatus;
    }

    /**
     * Initializes an instance of MonitorManagementClient client.
     *
     * @param credentials the management credentials for Azure
     */
    public MonitorManagementClientImpl(ServiceClientCredentials credentials) {
        this("https://management.azure.com", credentials);
    }

    /**
     * Initializes an instance of MonitorManagementClient client.
     *
     * @param baseUrl the base URL of the host
     * @param credentials the management credentials for Azure
     */
    public MonitorManagementClientImpl(String baseUrl, ServiceClientCredentials credentials) {
        super(baseUrl, credentials);
        initialize();
    }

    /**
     * Initializes an instance of MonitorManagementClient client.
     *
     * @param restClient the REST client to connect to Azure.
     */
    public MonitorManagementClientImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    protected void initialize() {
        this.acceptLanguage = "en-US";
        this.longRunningOperationRetryTimeout = 30;
        this.generateClientRequestId = true;
        this.autoscaleSettings = new AutoscaleSettingsInner(restClient().retrofit(), this);
        this.operations = new OperationsInner(restClient().retrofit(), this);
        this.alertRuleIncidents = new AlertRuleIncidentsInner(restClient().retrofit(), this);
        this.alertRules = new AlertRulesInner(restClient().retrofit(), this);
        this.logProfiles = new LogProfilesInner(restClient().retrofit(), this);
        this.diagnosticSettings = new DiagnosticSettingsInner(restClient().retrofit(), this);
        this.diagnosticSettingsCategorys = new DiagnosticSettingsCategorysInner(restClient().retrofit(), this);
        this.actionGroups = new ActionGroupsInner(restClient().retrofit(), this);
        this.activityLogAlerts = new ActivityLogAlertsInner(restClient().retrofit(), this);
        this.activityLogs = new ActivityLogsInner(restClient().retrofit(), this);
        this.eventCategories = new EventCategoriesInner(restClient().retrofit(), this);
        this.tenantActivityLogs = new TenantActivityLogsInner(restClient().retrofit(), this);
        this.metricDefinitions = new MetricDefinitionsInner(restClient().retrofit(), this);
        this.metrics = new MetricsInner(restClient().retrofit(), this);
        this.metricBaselines = new MetricBaselinesInner(restClient().retrofit(), this);
        this.metricAlerts = new MetricAlertsInner(restClient().retrofit(), this);
        this.metricAlertsStatus = new MetricAlertsStatusInner(restClient().retrofit(), this);
        this.azureClient = new AzureClient(this);
        initializeService();
    }

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    @Override
    public String userAgent() {
        return String.format("%s (%s)", super.userAgent(), "MonitorManagementClient");
    }

    private void initializeService() {
        service = restClient().retrofit().create(MonitorManagementClientService.class);
    }

    /**
     * The interface defining all the services for MonitorManagementClient to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MonitorManagementClientService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.MonitorManagementClient createOrUpdateScheduledQueryRules" })
        @PUT("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}")
        Observable<Response<ResponseBody>> createOrUpdateScheduledQueryRules(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("ruleName") String ruleName, @Query("api-version") String apiVersion, @Body LogSearchRuleResourceInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.MonitorManagementClient getScheduledQueryRule" })
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}")
        Observable<Response<ResponseBody>> getScheduledQueryRule(@Path("resourceGroupName") String resourceGroupName, @Path("ruleName") String ruleName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.MonitorManagementClient deleteScheduledQueryRules" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteScheduledQueryRules(@Path("resourceGroupName") String resourceGroupName, @Path("ruleName") String ruleName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.MonitorManagementClient getListScheduledQueryRules" })
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules")
        Observable<Response<ResponseBody>> getListScheduledQueryRules(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates or updates an log search rule.
     Request method: PUT		Request URI: https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/microsoft.insights/scheduledQueryRules/{logsearch-rule-name}?api-version={api-version}.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ruleName The name of the rule.
     * @param parameters The parameters of the rule to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LogSearchRuleResourceInner object if successful.
     */
    public LogSearchRuleResourceInner createOrUpdateScheduledQueryRules(String resourceGroupName, String ruleName, LogSearchRuleResourceInner parameters) {
        return createOrUpdateScheduledQueryRulesWithServiceResponseAsync(resourceGroupName, ruleName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates an log search rule.
     Request method: PUT		Request URI: https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/microsoft.insights/scheduledQueryRules/{logsearch-rule-name}?api-version={api-version}.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ruleName The name of the rule.
     * @param parameters The parameters of the rule to create or update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LogSearchRuleResourceInner> createOrUpdateScheduledQueryRulesAsync(String resourceGroupName, String ruleName, LogSearchRuleResourceInner parameters, final ServiceCallback<LogSearchRuleResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateScheduledQueryRulesWithServiceResponseAsync(resourceGroupName, ruleName, parameters), serviceCallback);
    }

    /**
     * Creates or updates an log search rule.
     Request method: PUT		Request URI: https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/microsoft.insights/scheduledQueryRules/{logsearch-rule-name}?api-version={api-version}.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ruleName The name of the rule.
     * @param parameters The parameters of the rule to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LogSearchRuleResourceInner object
     */
    public Observable<LogSearchRuleResourceInner> createOrUpdateScheduledQueryRulesAsync(String resourceGroupName, String ruleName, LogSearchRuleResourceInner parameters) {
        return createOrUpdateScheduledQueryRulesWithServiceResponseAsync(resourceGroupName, ruleName, parameters).map(new Func1<ServiceResponse<LogSearchRuleResourceInner>, LogSearchRuleResourceInner>() {
            @Override
            public LogSearchRuleResourceInner call(ServiceResponse<LogSearchRuleResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an log search rule.
     Request method: PUT		Request URI: https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/microsoft.insights/scheduledQueryRules/{logsearch-rule-name}?api-version={api-version}.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ruleName The name of the rule.
     * @param parameters The parameters of the rule to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LogSearchRuleResourceInner object
     */
    public Observable<ServiceResponse<LogSearchRuleResourceInner>> createOrUpdateScheduledQueryRulesWithServiceResponseAsync(String resourceGroupName, String ruleName, LogSearchRuleResourceInner parameters) {
        if (this.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (ruleName == null) {
            throw new IllegalArgumentException("Parameter ruleName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-04-16";
        return service.createOrUpdateScheduledQueryRules(this.subscriptionId(), resourceGroupName, ruleName, apiVersion, parameters, this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LogSearchRuleResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<LogSearchRuleResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LogSearchRuleResourceInner> clientResponse = createOrUpdateScheduledQueryRulesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LogSearchRuleResourceInner> createOrUpdateScheduledQueryRulesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<LogSearchRuleResourceInner, CloudException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<LogSearchRuleResourceInner>() { }.getType())
                .register(201, new TypeToken<LogSearchRuleResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets an Log Search rule.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ruleName The name of the rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LogSearchRuleResourceInner object if successful.
     */
    public LogSearchRuleResourceInner getScheduledQueryRule(String resourceGroupName, String ruleName) {
        return getScheduledQueryRuleWithServiceResponseAsync(resourceGroupName, ruleName).toBlocking().single().body();
    }

    /**
     * Gets an Log Search rule.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ruleName The name of the rule.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LogSearchRuleResourceInner> getScheduledQueryRuleAsync(String resourceGroupName, String ruleName, final ServiceCallback<LogSearchRuleResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getScheduledQueryRuleWithServiceResponseAsync(resourceGroupName, ruleName), serviceCallback);
    }

    /**
     * Gets an Log Search rule.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ruleName The name of the rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LogSearchRuleResourceInner object
     */
    public Observable<LogSearchRuleResourceInner> getScheduledQueryRuleAsync(String resourceGroupName, String ruleName) {
        return getScheduledQueryRuleWithServiceResponseAsync(resourceGroupName, ruleName).map(new Func1<ServiceResponse<LogSearchRuleResourceInner>, LogSearchRuleResourceInner>() {
            @Override
            public LogSearchRuleResourceInner call(ServiceResponse<LogSearchRuleResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an Log Search rule.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ruleName The name of the rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LogSearchRuleResourceInner object
     */
    public Observable<ServiceResponse<LogSearchRuleResourceInner>> getScheduledQueryRuleWithServiceResponseAsync(String resourceGroupName, String ruleName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (ruleName == null) {
            throw new IllegalArgumentException("Parameter ruleName is required and cannot be null.");
        }
        if (this.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-04-16";
        return service.getScheduledQueryRule(resourceGroupName, ruleName, this.subscriptionId(), apiVersion, this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LogSearchRuleResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<LogSearchRuleResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LogSearchRuleResourceInner> clientResponse = getScheduledQueryRuleDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LogSearchRuleResourceInner> getScheduledQueryRuleDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<LogSearchRuleResourceInner, CloudException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<LogSearchRuleResourceInner>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a Log Search rule.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ruleName The name of the rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteScheduledQueryRules(String resourceGroupName, String ruleName) {
        deleteScheduledQueryRulesWithServiceResponseAsync(resourceGroupName, ruleName).toBlocking().single().body();
    }

    /**
     * Deletes a Log Search rule.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ruleName The name of the rule.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteScheduledQueryRulesAsync(String resourceGroupName, String ruleName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteScheduledQueryRulesWithServiceResponseAsync(resourceGroupName, ruleName), serviceCallback);
    }

    /**
     * Deletes a Log Search rule.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ruleName The name of the rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteScheduledQueryRulesAsync(String resourceGroupName, String ruleName) {
        return deleteScheduledQueryRulesWithServiceResponseAsync(resourceGroupName, ruleName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a Log Search rule.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ruleName The name of the rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteScheduledQueryRulesWithServiceResponseAsync(String resourceGroupName, String ruleName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (ruleName == null) {
            throw new IllegalArgumentException("Parameter ruleName is required and cannot be null.");
        }
        if (this.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-04-16";
        return service.deleteScheduledQueryRules(resourceGroupName, ruleName, this.subscriptionId(), apiVersion, this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteScheduledQueryRulesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteScheduledQueryRulesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List the Log Search rules within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LogSearchRuleResourceInner&gt; object if successful.
     */
    public List<LogSearchRuleResourceInner> getListScheduledQueryRules(String resourceGroupName) {
        return getListScheduledQueryRulesWithServiceResponseAsync(resourceGroupName).toBlocking().single().body();
    }

    /**
     * List the Log Search rules within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LogSearchRuleResourceInner>> getListScheduledQueryRulesAsync(String resourceGroupName, final ServiceCallback<List<LogSearchRuleResourceInner>> serviceCallback) {
        return ServiceFuture.fromResponse(getListScheduledQueryRulesWithServiceResponseAsync(resourceGroupName), serviceCallback);
    }

    /**
     * List the Log Search rules within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LogSearchRuleResourceInner&gt; object
     */
    public Observable<List<LogSearchRuleResourceInner>> getListScheduledQueryRulesAsync(String resourceGroupName) {
        return getListScheduledQueryRulesWithServiceResponseAsync(resourceGroupName).map(new Func1<ServiceResponse<List<LogSearchRuleResourceInner>>, List<LogSearchRuleResourceInner>>() {
            @Override
            public List<LogSearchRuleResourceInner> call(ServiceResponse<List<LogSearchRuleResourceInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List the Log Search rules within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LogSearchRuleResourceInner&gt; object
     */
    public Observable<ServiceResponse<List<LogSearchRuleResourceInner>>> getListScheduledQueryRulesWithServiceResponseAsync(String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-04-16";
        final String filter = null;
        return service.getListScheduledQueryRules(resourceGroupName, this.subscriptionId(), apiVersion, filter, this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<LogSearchRuleResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<LogSearchRuleResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<LogSearchRuleResourceInner>> result = getListScheduledQueryRulesDelegate(response);
                        ServiceResponse<List<LogSearchRuleResourceInner>> clientResponse = new ServiceResponse<List<LogSearchRuleResourceInner>>(result.body().items(), result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List the Log Search rules within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param filter The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LogSearchRuleResourceInner&gt; object if successful.
     */
    public List<LogSearchRuleResourceInner> getListScheduledQueryRules(String resourceGroupName, String filter) {
        return getListScheduledQueryRulesWithServiceResponseAsync(resourceGroupName, filter).toBlocking().single().body();
    }

    /**
     * List the Log Search rules within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param filter The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LogSearchRuleResourceInner>> getListScheduledQueryRulesAsync(String resourceGroupName, String filter, final ServiceCallback<List<LogSearchRuleResourceInner>> serviceCallback) {
        return ServiceFuture.fromResponse(getListScheduledQueryRulesWithServiceResponseAsync(resourceGroupName, filter), serviceCallback);
    }

    /**
     * List the Log Search rules within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param filter The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LogSearchRuleResourceInner&gt; object
     */
    public Observable<List<LogSearchRuleResourceInner>> getListScheduledQueryRulesAsync(String resourceGroupName, String filter) {
        return getListScheduledQueryRulesWithServiceResponseAsync(resourceGroupName, filter).map(new Func1<ServiceResponse<List<LogSearchRuleResourceInner>>, List<LogSearchRuleResourceInner>>() {
            @Override
            public List<LogSearchRuleResourceInner> call(ServiceResponse<List<LogSearchRuleResourceInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List the Log Search rules within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param filter The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LogSearchRuleResourceInner&gt; object
     */
    public Observable<ServiceResponse<List<LogSearchRuleResourceInner>>> getListScheduledQueryRulesWithServiceResponseAsync(String resourceGroupName, String filter) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-04-16";
        return service.getListScheduledQueryRules(resourceGroupName, this.subscriptionId(), apiVersion, filter, this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<LogSearchRuleResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<LogSearchRuleResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<LogSearchRuleResourceInner>> result = getListScheduledQueryRulesDelegate(response);
                        ServiceResponse<List<LogSearchRuleResourceInner>> clientResponse = new ServiceResponse<List<LogSearchRuleResourceInner>>(result.body().items(), result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<LogSearchRuleResourceInner>> getListScheduledQueryRulesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<PageImpl1<LogSearchRuleResourceInner>, CloudException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<LogSearchRuleResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
