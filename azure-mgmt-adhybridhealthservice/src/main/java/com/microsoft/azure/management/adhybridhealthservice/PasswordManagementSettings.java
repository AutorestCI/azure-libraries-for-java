/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.adhybridhealthservice;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The password management settings.
 */
public class PasswordManagementSettings {
    /**
     * Indicates if the password extension is enabled.
     */
    @JsonProperty(value = "enabled")
    private Boolean enabled;

    /**
     * The file path of the password management extension.
     */
    @JsonProperty(value = "extensionFilePath")
    private String extensionFilePath;

    /**
     * Connection point of password management.
     */
    @JsonProperty(value = "connectTo")
    private String connectTo;

    /**
     * Connection timeoit for password extension.
     */
    @JsonProperty(value = "connectionTimeout")
    private Integer connectionTimeout;

    /**
     * User to execute password extension.
     */
    @JsonProperty(value = "user")
    private String user;

    /**
     * The supported password operations. Possible values include: 'Undefined',
     * 'Set', 'Change'.
     */
    @JsonProperty(value = "supportedPasswordOperations")
    private PasswordOperationTypes supportedPasswordOperations;

    /**
     * The maximum number of retries.
     */
    @JsonProperty(value = "maximumRetryCount")
    private Integer maximumRetryCount;

    /**
     * The time between retries.
     */
    @JsonProperty(value = "retryIntervalInSeconds")
    private Integer retryIntervalInSeconds;

    /**
     * Indicates if a secure connection is required for password management.
     */
    @JsonProperty(value = "requiresSecureConnection")
    private Boolean requiresSecureConnection;

    /**
     * Indicates if accounts should be unloacked when resetting password.
     */
    @JsonProperty(value = "unlockAccount")
    private Boolean unlockAccount;

    /**
     * Get the enabled value.
     *
     * @return the enabled value
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled value.
     *
     * @param enabled the enabled value to set
     * @return the PasswordManagementSettings object itself.
     */
    public PasswordManagementSettings withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the extensionFilePath value.
     *
     * @return the extensionFilePath value
     */
    public String extensionFilePath() {
        return this.extensionFilePath;
    }

    /**
     * Set the extensionFilePath value.
     *
     * @param extensionFilePath the extensionFilePath value to set
     * @return the PasswordManagementSettings object itself.
     */
    public PasswordManagementSettings withExtensionFilePath(String extensionFilePath) {
        this.extensionFilePath = extensionFilePath;
        return this;
    }

    /**
     * Get the connectTo value.
     *
     * @return the connectTo value
     */
    public String connectTo() {
        return this.connectTo;
    }

    /**
     * Set the connectTo value.
     *
     * @param connectTo the connectTo value to set
     * @return the PasswordManagementSettings object itself.
     */
    public PasswordManagementSettings withConnectTo(String connectTo) {
        this.connectTo = connectTo;
        return this;
    }

    /**
     * Get the connectionTimeout value.
     *
     * @return the connectionTimeout value
     */
    public Integer connectionTimeout() {
        return this.connectionTimeout;
    }

    /**
     * Set the connectionTimeout value.
     *
     * @param connectionTimeout the connectionTimeout value to set
     * @return the PasswordManagementSettings object itself.
     */
    public PasswordManagementSettings withConnectionTimeout(Integer connectionTimeout) {
        this.connectionTimeout = connectionTimeout;
        return this;
    }

    /**
     * Get the user value.
     *
     * @return the user value
     */
    public String user() {
        return this.user;
    }

    /**
     * Set the user value.
     *
     * @param user the user value to set
     * @return the PasswordManagementSettings object itself.
     */
    public PasswordManagementSettings withUser(String user) {
        this.user = user;
        return this;
    }

    /**
     * Get the supportedPasswordOperations value.
     *
     * @return the supportedPasswordOperations value
     */
    public PasswordOperationTypes supportedPasswordOperations() {
        return this.supportedPasswordOperations;
    }

    /**
     * Set the supportedPasswordOperations value.
     *
     * @param supportedPasswordOperations the supportedPasswordOperations value to set
     * @return the PasswordManagementSettings object itself.
     */
    public PasswordManagementSettings withSupportedPasswordOperations(PasswordOperationTypes supportedPasswordOperations) {
        this.supportedPasswordOperations = supportedPasswordOperations;
        return this;
    }

    /**
     * Get the maximumRetryCount value.
     *
     * @return the maximumRetryCount value
     */
    public Integer maximumRetryCount() {
        return this.maximumRetryCount;
    }

    /**
     * Set the maximumRetryCount value.
     *
     * @param maximumRetryCount the maximumRetryCount value to set
     * @return the PasswordManagementSettings object itself.
     */
    public PasswordManagementSettings withMaximumRetryCount(Integer maximumRetryCount) {
        this.maximumRetryCount = maximumRetryCount;
        return this;
    }

    /**
     * Get the retryIntervalInSeconds value.
     *
     * @return the retryIntervalInSeconds value
     */
    public Integer retryIntervalInSeconds() {
        return this.retryIntervalInSeconds;
    }

    /**
     * Set the retryIntervalInSeconds value.
     *
     * @param retryIntervalInSeconds the retryIntervalInSeconds value to set
     * @return the PasswordManagementSettings object itself.
     */
    public PasswordManagementSettings withRetryIntervalInSeconds(Integer retryIntervalInSeconds) {
        this.retryIntervalInSeconds = retryIntervalInSeconds;
        return this;
    }

    /**
     * Get the requiresSecureConnection value.
     *
     * @return the requiresSecureConnection value
     */
    public Boolean requiresSecureConnection() {
        return this.requiresSecureConnection;
    }

    /**
     * Set the requiresSecureConnection value.
     *
     * @param requiresSecureConnection the requiresSecureConnection value to set
     * @return the PasswordManagementSettings object itself.
     */
    public PasswordManagementSettings withRequiresSecureConnection(Boolean requiresSecureConnection) {
        this.requiresSecureConnection = requiresSecureConnection;
        return this;
    }

    /**
     * Get the unlockAccount value.
     *
     * @return the unlockAccount value
     */
    public Boolean unlockAccount() {
        return this.unlockAccount;
    }

    /**
     * Set the unlockAccount value.
     *
     * @param unlockAccount the unlockAccount value to set
     * @return the PasswordManagementSettings object itself.
     */
    public PasswordManagementSettings withUnlockAccount(Boolean unlockAccount) {
        this.unlockAccount = unlockAccount;
        return this;
    }

}
