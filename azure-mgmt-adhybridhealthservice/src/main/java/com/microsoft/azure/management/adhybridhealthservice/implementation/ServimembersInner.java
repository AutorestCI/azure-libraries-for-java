/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.adhybridhealthservice.implementation;

import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Servimembers.
 */
public class ServimembersInner implements InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private ServimembersService service;
    /** The service client containing this operation class. */
    private ADHybridHealthServiceImpl client;

    /**
     * Initializes an instance of ServimembersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ServimembersInner(Retrofit retrofit, ADHybridHealthServiceImpl client) {
        this.service = retrofit.create(ServimembersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Servimembers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ServimembersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.adhybridhealthservice.Servimembers get" })
        @GET("providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}")
        Observable<Response<ResponseBody>> get(@Path("serviceName") String serviceName, @Path("serviceMemberId") UUID serviceMemberId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.adhybridhealthservice.Servimembers delete" })
        @HTTP(path = "providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("serviceName") String serviceName, @Path("serviceMemberId") UUID serviceMemberId, @Query("confirm") Boolean confirm, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the details of a server, for a given service, that are onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServiceMemberInner object if successful.
     */
    public ServiceMemberInner get(String serviceName, UUID serviceMemberId) {
        return getWithServiceResponseAsync(serviceName, serviceMemberId).toBlocking().single().body();
    }

    /**
     * Gets the details of a server, for a given service, that are onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServiceMemberInner> getAsync(String serviceName, UUID serviceMemberId, final ServiceCallback<ServiceMemberInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(serviceName, serviceMemberId), serviceCallback);
    }

    /**
     * Gets the details of a server, for a given service, that are onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceMemberInner object
     */
    public Observable<ServiceMemberInner> getAsync(String serviceName, UUID serviceMemberId) {
        return getWithServiceResponseAsync(serviceName, serviceMemberId).map(new Func1<ServiceResponse<ServiceMemberInner>, ServiceMemberInner>() {
            @Override
            public ServiceMemberInner call(ServiceResponse<ServiceMemberInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of a server, for a given service, that are onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceMemberInner object
     */
    public Observable<ServiceResponse<ServiceMemberInner>> getWithServiceResponseAsync(String serviceName, UUID serviceMemberId) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (serviceMemberId == null) {
            throw new IllegalArgumentException("Parameter serviceMemberId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(serviceName, serviceMemberId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServiceMemberInner>>>() {
                @Override
                public Observable<ServiceResponse<ServiceMemberInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServiceMemberInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServiceMemberInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServiceMemberInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServiceMemberInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String serviceName, UUID serviceMemberId) {
        deleteWithServiceResponseAsync(serviceName, serviceMemberId).toBlocking().single().body();
    }

    /**
     * Deletes a server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String serviceName, UUID serviceMemberId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(serviceName, serviceMemberId), serviceCallback);
    }

    /**
     * Deletes a server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String serviceName, UUID serviceMemberId) {
        return deleteWithServiceResponseAsync(serviceName, serviceMemberId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String serviceName, UUID serviceMemberId) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (serviceMemberId == null) {
            throw new IllegalArgumentException("Parameter serviceMemberId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Boolean confirm = null;
        return service.delete(serviceName, serviceMemberId, confirm, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Deletes a server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String serviceName, UUID serviceMemberId, Boolean confirm) {
        deleteWithServiceResponseAsync(serviceName, serviceMemberId, confirm).toBlocking().single().body();
    }

    /**
     * Deletes a server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String serviceName, UUID serviceMemberId, Boolean confirm, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(serviceName, serviceMemberId, confirm), serviceCallback);
    }

    /**
     * Deletes a server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String serviceName, UUID serviceMemberId, Boolean confirm) {
        return deleteWithServiceResponseAsync(serviceName, serviceMemberId, confirm).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a server that has been onboarded to Azure Active Directory Connect Health Service.
     *
     * @param serviceName The name of the service.
     * @param serviceMemberId The server Id.
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String serviceName, UUID serviceMemberId, Boolean confirm) {
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (serviceMemberId == null) {
            throw new IllegalArgumentException("Parameter serviceMemberId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(serviceName, serviceMemberId, confirm, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
