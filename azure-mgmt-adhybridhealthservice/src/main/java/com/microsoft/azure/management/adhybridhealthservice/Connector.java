/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.adhybridhealthservice;

import org.joda.time.DateTime;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The connect details.
 */
public class Connector {
    /**
     * The connector Id.
     */
    @JsonProperty(value = "connectorId")
    private String connectorId;

    /**
     * The connector Id.
     */
    @JsonProperty(value = "id")
    private String id;

    /**
     * The connector name.
     */
    @JsonProperty(value = "name")
    private String name;

    /**
     * The connector version.
     */
    @JsonProperty(value = "version")
    private Integer version;

    /**
     * The connector type.
     */
    @JsonProperty(value = "type")
    private String type;

    /**
     * The connector description.
     */
    @JsonProperty(value = "description")
    private String description;

    /**
     * The schema xml for the connector.
     */
    @JsonProperty(value = "schemaXml")
    private String schemaXml;

    /**
     * The password management settings of the connector.
     */
    @JsonProperty(value = "passwordManagementSettings")
    private Object passwordManagementSettings;

    /**
     * The password hash synchronization configuration of the connector.
     */
    @JsonProperty(value = "passwordHashSyncConfiguration")
    private Object passwordHashSyncConfiguration;

    /**
     * The date and time when this connector was created.
     */
    @JsonProperty(value = "timeCreated")
    private DateTime timeCreated;

    /**
     * The date and time when this connector was last modified.
     */
    @JsonProperty(value = "timeLastModified")
    private DateTime timeLastModified;

    /**
     * The partitions of the connector.
     */
    @JsonProperty(value = "partitions")
    private List<Partition> partitions;

    /**
     * The run profiles of the connector.
     */
    @JsonProperty(value = "runProfiles")
    private List<RunProfile> runProfiles;

    /**
     * The class inclusion list of the connector.
     */
    @JsonProperty(value = "classesIncluded")
    private List<String> classesIncluded;

    /**
     * The attribute inclusion list of the connector.
     */
    @JsonProperty(value = "attributesIncluded")
    private List<String> attributesIncluded;

    /**
     * Get the connectorId value.
     *
     * @return the connectorId value
     */
    public String connectorId() {
        return this.connectorId;
    }

    /**
     * Set the connectorId value.
     *
     * @param connectorId the connectorId value to set
     * @return the Connector object itself.
     */
    public Connector withConnectorId(String connectorId) {
        this.connectorId = connectorId;
        return this;
    }

    /**
     * Get the id value.
     *
     * @return the id value
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id value.
     *
     * @param id the id value to set
     * @return the Connector object itself.
     */
    public Connector withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name value.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name value.
     *
     * @param name the name value to set
     * @return the Connector object itself.
     */
    public Connector withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the version value.
     *
     * @return the version value
     */
    public Integer version() {
        return this.version;
    }

    /**
     * Set the version value.
     *
     * @param version the version value to set
     * @return the Connector object itself.
     */
    public Connector withVersion(Integer version) {
        this.version = version;
        return this;
    }

    /**
     * Get the type value.
     *
     * @return the type value
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type value.
     *
     * @param type the type value to set
     * @return the Connector object itself.
     */
    public Connector withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the description value.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description value.
     *
     * @param description the description value to set
     * @return the Connector object itself.
     */
    public Connector withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the schemaXml value.
     *
     * @return the schemaXml value
     */
    public String schemaXml() {
        return this.schemaXml;
    }

    /**
     * Set the schemaXml value.
     *
     * @param schemaXml the schemaXml value to set
     * @return the Connector object itself.
     */
    public Connector withSchemaXml(String schemaXml) {
        this.schemaXml = schemaXml;
        return this;
    }

    /**
     * Get the passwordManagementSettings value.
     *
     * @return the passwordManagementSettings value
     */
    public Object passwordManagementSettings() {
        return this.passwordManagementSettings;
    }

    /**
     * Set the passwordManagementSettings value.
     *
     * @param passwordManagementSettings the passwordManagementSettings value to set
     * @return the Connector object itself.
     */
    public Connector withPasswordManagementSettings(Object passwordManagementSettings) {
        this.passwordManagementSettings = passwordManagementSettings;
        return this;
    }

    /**
     * Get the passwordHashSyncConfiguration value.
     *
     * @return the passwordHashSyncConfiguration value
     */
    public Object passwordHashSyncConfiguration() {
        return this.passwordHashSyncConfiguration;
    }

    /**
     * Set the passwordHashSyncConfiguration value.
     *
     * @param passwordHashSyncConfiguration the passwordHashSyncConfiguration value to set
     * @return the Connector object itself.
     */
    public Connector withPasswordHashSyncConfiguration(Object passwordHashSyncConfiguration) {
        this.passwordHashSyncConfiguration = passwordHashSyncConfiguration;
        return this;
    }

    /**
     * Get the timeCreated value.
     *
     * @return the timeCreated value
     */
    public DateTime timeCreated() {
        return this.timeCreated;
    }

    /**
     * Set the timeCreated value.
     *
     * @param timeCreated the timeCreated value to set
     * @return the Connector object itself.
     */
    public Connector withTimeCreated(DateTime timeCreated) {
        this.timeCreated = timeCreated;
        return this;
    }

    /**
     * Get the timeLastModified value.
     *
     * @return the timeLastModified value
     */
    public DateTime timeLastModified() {
        return this.timeLastModified;
    }

    /**
     * Set the timeLastModified value.
     *
     * @param timeLastModified the timeLastModified value to set
     * @return the Connector object itself.
     */
    public Connector withTimeLastModified(DateTime timeLastModified) {
        this.timeLastModified = timeLastModified;
        return this;
    }

    /**
     * Get the partitions value.
     *
     * @return the partitions value
     */
    public List<Partition> partitions() {
        return this.partitions;
    }

    /**
     * Set the partitions value.
     *
     * @param partitions the partitions value to set
     * @return the Connector object itself.
     */
    public Connector withPartitions(List<Partition> partitions) {
        this.partitions = partitions;
        return this;
    }

    /**
     * Get the runProfiles value.
     *
     * @return the runProfiles value
     */
    public List<RunProfile> runProfiles() {
        return this.runProfiles;
    }

    /**
     * Set the runProfiles value.
     *
     * @param runProfiles the runProfiles value to set
     * @return the Connector object itself.
     */
    public Connector withRunProfiles(List<RunProfile> runProfiles) {
        this.runProfiles = runProfiles;
        return this;
    }

    /**
     * Get the classesIncluded value.
     *
     * @return the classesIncluded value
     */
    public List<String> classesIncluded() {
        return this.classesIncluded;
    }

    /**
     * Set the classesIncluded value.
     *
     * @param classesIncluded the classesIncluded value to set
     * @return the Connector object itself.
     */
    public Connector withClassesIncluded(List<String> classesIncluded) {
        this.classesIncluded = classesIncluded;
        return this;
    }

    /**
     * Get the attributesIncluded value.
     *
     * @return the attributesIncluded value
     */
    public List<String> attributesIncluded() {
        return this.attributesIncluded;
    }

    /**
     * Set the attributesIncluded value.
     *
     * @param attributesIncluded the attributesIncluded value to set
     * @return the Connector object itself.
     */
    public Connector withAttributesIncluded(List<String> attributesIncluded) {
        this.attributesIncluded = attributesIncluded;
        return this;
    }

}
