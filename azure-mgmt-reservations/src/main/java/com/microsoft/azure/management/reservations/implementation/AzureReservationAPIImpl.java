/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.reservations.implementation;

import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureClient;
import com.microsoft.azure.AzureServiceClient;
import com.microsoft.azure.management.reservations.ErrorException;
import com.microsoft.rest.credentials.ServiceClientCredentials;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the AzureReservationAPIImpl class.
 */
public class AzureReservationAPIImpl extends AzureServiceClient {
    /** The Retrofit service to perform REST calls. */
    private AzureReservationAPIService service;
    /** the {@link AzureClient} used for long running operations. */
    private AzureClient azureClient;

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    public AzureClient getAzureClient() {
        return this.azureClient;
    }

    /** Supported version. */
    private String apiVersion;

    /**
     * Gets Supported version.
     *
     * @return the apiVersion value.
     */
    public String apiVersion() {
        return this.apiVersion;
    }

    /** Gets or sets the preferred language for the response. */
    private String acceptLanguage;

    /**
     * Gets Gets or sets the preferred language for the response.
     *
     * @return the acceptLanguage value.
     */
    public String acceptLanguage() {
        return this.acceptLanguage;
    }

    /**
     * Sets Gets or sets the preferred language for the response.
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    public AzureReservationAPIImpl withAcceptLanguage(String acceptLanguage) {
        this.acceptLanguage = acceptLanguage;
        return this;
    }

    /** Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30. */
    private int longRunningOperationRetryTimeout;

    /**
     * Gets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    public int longRunningOperationRetryTimeout() {
        return this.longRunningOperationRetryTimeout;
    }

    /**
     * Sets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    public AzureReservationAPIImpl withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout) {
        this.longRunningOperationRetryTimeout = longRunningOperationRetryTimeout;
        return this;
    }

    /** When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true. */
    private boolean generateClientRequestId;

    /**
     * Gets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @return the generateClientRequestId value.
     */
    public boolean generateClientRequestId() {
        return this.generateClientRequestId;
    }

    /**
     * Sets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    public AzureReservationAPIImpl withGenerateClientRequestId(boolean generateClientRequestId) {
        this.generateClientRequestId = generateClientRequestId;
        return this;
    }

    /**
     * The ReservationOrdersInner object to access its operations.
     */
    private ReservationOrdersInner reservationOrders;

    /**
     * Gets the ReservationOrdersInner object to access its operations.
     * @return the ReservationOrdersInner object.
     */
    public ReservationOrdersInner reservationOrders() {
        return this.reservationOrders;
    }

    /**
     * The ReservationsInner object to access its operations.
     */
    private ReservationsInner reservations;

    /**
     * Gets the ReservationsInner object to access its operations.
     * @return the ReservationsInner object.
     */
    public ReservationsInner reservations() {
        return this.reservations;
    }

    /**
     * The OperationsInner object to access its operations.
     */
    private OperationsInner operations;

    /**
     * Gets the OperationsInner object to access its operations.
     * @return the OperationsInner object.
     */
    public OperationsInner operations() {
        return this.operations;
    }

    /**
     * Initializes an instance of AzureReservationAPI client.
     *
     * @param credentials the management credentials for Azure
     */
    public AzureReservationAPIImpl(ServiceClientCredentials credentials) {
        this("https://management.azure.com", credentials);
    }

    /**
     * Initializes an instance of AzureReservationAPI client.
     *
     * @param baseUrl the base URL of the host
     * @param credentials the management credentials for Azure
     */
    public AzureReservationAPIImpl(String baseUrl, ServiceClientCredentials credentials) {
        super(baseUrl, credentials);
        initialize();
    }

    /**
     * Initializes an instance of AzureReservationAPI client.
     *
     * @param restClient the REST client to connect to Azure.
     */
    public AzureReservationAPIImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    protected void initialize() {
        this.apiVersion = "2018-06-01";
        this.acceptLanguage = "en-US";
        this.longRunningOperationRetryTimeout = 30;
        this.generateClientRequestId = true;
        this.reservationOrders = new ReservationOrdersInner(restClient().retrofit(), this);
        this.reservations = new ReservationsInner(restClient().retrofit(), this);
        this.operations = new OperationsInner(restClient().retrofit(), this);
        this.azureClient = new AzureClient(this);
        initializeService();
    }

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    @Override
    public String userAgent() {
        return String.format("%s (%s, %s)", super.userAgent(), "AzureReservationAPI", "2018-06-01");
    }

    private void initializeService() {
        service = restClient().retrofit().create(AzureReservationAPIService.class);
    }

    /**
     * The interface defining all the services for AzureReservationAPI to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AzureReservationAPIService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.reservations.AzureReservationAPI getCatalog" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Capacity/catalogs")
        Observable<Response<ResponseBody>> getCatalog(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("reservedResourceType") String reservedResourceType1, @Query("location") String location, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.reservations.AzureReservationAPI getAppliedReservationList" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Capacity/appliedReservations")
        Observable<Response<ResponseBody>> getAppliedReservationList(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the regions and skus that are available for RI purchase for the specified Azure subscription.
     *
     * @param subscriptionId Id of the subscription
     * @param reservedResourceType The type of the resource for which the skus should be provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;CatalogInner&gt; object if successful.
     */
    public List<CatalogInner> getCatalog(String subscriptionId, String reservedResourceType) {
        return getCatalogWithServiceResponseAsync(subscriptionId, reservedResourceType).toBlocking().single().body();
    }

    /**
     * Get the regions and skus that are available for RI purchase for the specified Azure subscription.
     *
     * @param subscriptionId Id of the subscription
     * @param reservedResourceType The type of the resource for which the skus should be provided.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CatalogInner>> getCatalogAsync(String subscriptionId, String reservedResourceType, final ServiceCallback<List<CatalogInner>> serviceCallback) {
        return ServiceFuture.fromResponse(getCatalogWithServiceResponseAsync(subscriptionId, reservedResourceType), serviceCallback);
    }

    /**
     * Get the regions and skus that are available for RI purchase for the specified Azure subscription.
     *
     * @param subscriptionId Id of the subscription
     * @param reservedResourceType The type of the resource for which the skus should be provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CatalogInner&gt; object
     */
    public Observable<List<CatalogInner>> getCatalogAsync(String subscriptionId, String reservedResourceType) {
        return getCatalogWithServiceResponseAsync(subscriptionId, reservedResourceType).map(new Func1<ServiceResponse<List<CatalogInner>>, List<CatalogInner>>() {
            @Override
            public List<CatalogInner> call(ServiceResponse<List<CatalogInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the regions and skus that are available for RI purchase for the specified Azure subscription.
     *
     * @param subscriptionId Id of the subscription
     * @param reservedResourceType The type of the resource for which the skus should be provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CatalogInner&gt; object
     */
    public Observable<ServiceResponse<List<CatalogInner>>> getCatalogWithServiceResponseAsync(String subscriptionId, String reservedResourceType) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (reservedResourceType == null) {
            throw new IllegalArgumentException("Parameter reservedResourceType is required and cannot be null.");
        }
        final String location = null;
        return service.getCatalog(subscriptionId, this.apiVersion(), reservedResourceType, location, this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<CatalogInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<CatalogInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<CatalogInner>> clientResponse = getCatalogDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get the regions and skus that are available for RI purchase for the specified Azure subscription.
     *
     * @param subscriptionId Id of the subscription
     * @param reservedResourceType The type of the resource for which the skus should be provided.
     * @param location Filters the skus based on the location specified in this parameter. This can be an azure region or global
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;CatalogInner&gt; object if successful.
     */
    public List<CatalogInner> getCatalog(String subscriptionId, String reservedResourceType, String location) {
        return getCatalogWithServiceResponseAsync(subscriptionId, reservedResourceType, location).toBlocking().single().body();
    }

    /**
     * Get the regions and skus that are available for RI purchase for the specified Azure subscription.
     *
     * @param subscriptionId Id of the subscription
     * @param reservedResourceType The type of the resource for which the skus should be provided.
     * @param location Filters the skus based on the location specified in this parameter. This can be an azure region or global
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CatalogInner>> getCatalogAsync(String subscriptionId, String reservedResourceType, String location, final ServiceCallback<List<CatalogInner>> serviceCallback) {
        return ServiceFuture.fromResponse(getCatalogWithServiceResponseAsync(subscriptionId, reservedResourceType, location), serviceCallback);
    }

    /**
     * Get the regions and skus that are available for RI purchase for the specified Azure subscription.
     *
     * @param subscriptionId Id of the subscription
     * @param reservedResourceType The type of the resource for which the skus should be provided.
     * @param location Filters the skus based on the location specified in this parameter. This can be an azure region or global
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CatalogInner&gt; object
     */
    public Observable<List<CatalogInner>> getCatalogAsync(String subscriptionId, String reservedResourceType, String location) {
        return getCatalogWithServiceResponseAsync(subscriptionId, reservedResourceType, location).map(new Func1<ServiceResponse<List<CatalogInner>>, List<CatalogInner>>() {
            @Override
            public List<CatalogInner> call(ServiceResponse<List<CatalogInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the regions and skus that are available for RI purchase for the specified Azure subscription.
     *
     * @param subscriptionId Id of the subscription
     * @param reservedResourceType The type of the resource for which the skus should be provided.
     * @param location Filters the skus based on the location specified in this parameter. This can be an azure region or global
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CatalogInner&gt; object
     */
    public Observable<ServiceResponse<List<CatalogInner>>> getCatalogWithServiceResponseAsync(String subscriptionId, String reservedResourceType, String location) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (reservedResourceType == null) {
            throw new IllegalArgumentException("Parameter reservedResourceType is required and cannot be null.");
        }
        return service.getCatalog(subscriptionId, this.apiVersion(), reservedResourceType, location, this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<CatalogInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<CatalogInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<CatalogInner>> clientResponse = getCatalogDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<CatalogInner>> getCatalogDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<List<CatalogInner>, ErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<CatalogInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get list of applicable `Reservation`s.
     * Get applicable `Reservation`s that are applied to this subscription.
     *
     * @param subscriptionId Id of the subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AppliedReservationsInner object if successful.
     */
    public AppliedReservationsInner getAppliedReservationList(String subscriptionId) {
        return getAppliedReservationListWithServiceResponseAsync(subscriptionId).toBlocking().single().body();
    }

    /**
     * Get list of applicable `Reservation`s.
     * Get applicable `Reservation`s that are applied to this subscription.
     *
     * @param subscriptionId Id of the subscription
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AppliedReservationsInner> getAppliedReservationListAsync(String subscriptionId, final ServiceCallback<AppliedReservationsInner> serviceCallback) {
        return ServiceFuture.fromResponse(getAppliedReservationListWithServiceResponseAsync(subscriptionId), serviceCallback);
    }

    /**
     * Get list of applicable `Reservation`s.
     * Get applicable `Reservation`s that are applied to this subscription.
     *
     * @param subscriptionId Id of the subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AppliedReservationsInner object
     */
    public Observable<AppliedReservationsInner> getAppliedReservationListAsync(String subscriptionId) {
        return getAppliedReservationListWithServiceResponseAsync(subscriptionId).map(new Func1<ServiceResponse<AppliedReservationsInner>, AppliedReservationsInner>() {
            @Override
            public AppliedReservationsInner call(ServiceResponse<AppliedReservationsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get list of applicable `Reservation`s.
     * Get applicable `Reservation`s that are applied to this subscription.
     *
     * @param subscriptionId Id of the subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AppliedReservationsInner object
     */
    public Observable<ServiceResponse<AppliedReservationsInner>> getAppliedReservationListWithServiceResponseAsync(String subscriptionId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getAppliedReservationList(subscriptionId, this.apiVersion(), this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AppliedReservationsInner>>>() {
                @Override
                public Observable<ServiceResponse<AppliedReservationsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AppliedReservationsInner> clientResponse = getAppliedReservationListDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AppliedReservationsInner> getAppliedReservationListDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<AppliedReservationsInner, ErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<AppliedReservationsInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
