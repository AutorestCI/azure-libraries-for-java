/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabric.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.servicefabric.ErrorModelException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Applications.
 */
public class ApplicationsInner {
    /** The Retrofit service to perform REST calls. */
    private ApplicationsService service;
    /** The service client containing this operation class. */
    private ServiceFabricManagementClientImpl client;

    /**
     * Initializes an instance of ApplicationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ApplicationsInner(Retrofit retrofit, ServiceFabricManagementClientImpl client) {
        this.service = retrofit.create(ApplicationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Applications to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ApplicationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Applications get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationName") String applicationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Applications create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationName") String applicationName, @Query("api-version") String apiVersion, @Body ApplicationResourceInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Applications beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationName") String applicationName, @Query("api-version") String apiVersion, @Body ApplicationResourceInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Applications update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationName") String applicationName, @Query("api-version") String apiVersion, @Body ApplicationResourceUpdateInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Applications beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationName") String applicationName, @Query("api-version") String apiVersion, @Body ApplicationResourceUpdateInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Applications delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationName") String applicationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Applications beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationName") String applicationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Applications list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets a Service Fabric application resource.
     * Get a Service Fabric application resource created or in the process of being created in the Service Fabric cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationResourceInner object if successful.
     */
    public ApplicationResourceInner get(String resourceGroupName, String clusterName, String applicationName) {
        return getWithServiceResponseAsync(resourceGroupName, clusterName, applicationName).toBlocking().single().body();
    }

    /**
     * Gets a Service Fabric application resource.
     * Get a Service Fabric application resource created or in the process of being created in the Service Fabric cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationResourceInner> getAsync(String resourceGroupName, String clusterName, String applicationName, final ServiceCallback<ApplicationResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, clusterName, applicationName), serviceCallback);
    }

    /**
     * Gets a Service Fabric application resource.
     * Get a Service Fabric application resource created or in the process of being created in the Service Fabric cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationResourceInner object
     */
    public Observable<ApplicationResourceInner> getAsync(String resourceGroupName, String clusterName, String applicationName) {
        return getWithServiceResponseAsync(resourceGroupName, clusterName, applicationName).map(new Func1<ServiceResponse<ApplicationResourceInner>, ApplicationResourceInner>() {
            @Override
            public ApplicationResourceInner call(ServiceResponse<ApplicationResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a Service Fabric application resource.
     * Get a Service Fabric application resource created or in the process of being created in the Service Fabric cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationResourceInner object
     */
    public Observable<ServiceResponse<ApplicationResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String clusterName, String applicationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        final String apiVersion = "2017-07-01-preview";
        return service.get(this.client.subscriptionId(), resourceGroupName, clusterName, applicationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationResourceInner> getDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationResourceInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApplicationResourceInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Creates or updates a Service Fabric application resource.
     * Create or update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationResourceInner object if successful.
     */
    public ApplicationResourceInner create(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceInner parameters) {
        return createWithServiceResponseAsync(resourceGroupName, clusterName, applicationName, parameters).toBlocking().last().body();
    }

    /**
     * Creates or updates a Service Fabric application resource.
     * Create or update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationResourceInner> createAsync(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceInner parameters, final ServiceCallback<ApplicationResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, clusterName, applicationName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a Service Fabric application resource.
     * Create or update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ApplicationResourceInner> createAsync(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceInner parameters) {
        return createWithServiceResponseAsync(resourceGroupName, clusterName, applicationName, parameters).map(new Func1<ServiceResponse<ApplicationResourceInner>, ApplicationResourceInner>() {
            @Override
            public ApplicationResourceInner call(ServiceResponse<ApplicationResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a Service Fabric application resource.
     * Create or update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ApplicationResourceInner>> createWithServiceResponseAsync(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2017-07-01-preview";
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, clusterName, applicationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ApplicationResourceInner>() { }.getType());
    }

    /**
     * Creates or updates a Service Fabric application resource.
     * Create or update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationResourceInner object if successful.
     */
    public ApplicationResourceInner beginCreate(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceInner parameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, clusterName, applicationName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates a Service Fabric application resource.
     * Create or update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationResourceInner> beginCreateAsync(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceInner parameters, final ServiceCallback<ApplicationResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, clusterName, applicationName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a Service Fabric application resource.
     * Create or update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationResourceInner object
     */
    public Observable<ApplicationResourceInner> beginCreateAsync(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceInner parameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, clusterName, applicationName, parameters).map(new Func1<ServiceResponse<ApplicationResourceInner>, ApplicationResourceInner>() {
            @Override
            public ApplicationResourceInner call(ServiceResponse<ApplicationResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a Service Fabric application resource.
     * Create or update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationResourceInner object
     */
    public Observable<ServiceResponse<ApplicationResourceInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2017-07-01-preview";
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, clusterName, applicationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationResourceInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationResourceInner> beginCreateDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationResourceInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<ApplicationResourceInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Updates a Service Fabric application resource.
     * Update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource for patch operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationResourceUpdateInner object if successful.
     */
    public ApplicationResourceUpdateInner update(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceUpdateInner parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, clusterName, applicationName, parameters).toBlocking().last().body();
    }

    /**
     * Updates a Service Fabric application resource.
     * Update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource for patch operations.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationResourceUpdateInner> updateAsync(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceUpdateInner parameters, final ServiceCallback<ApplicationResourceUpdateInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, clusterName, applicationName, parameters), serviceCallback);
    }

    /**
     * Updates a Service Fabric application resource.
     * Update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource for patch operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ApplicationResourceUpdateInner> updateAsync(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceUpdateInner parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, clusterName, applicationName, parameters).map(new Func1<ServiceResponse<ApplicationResourceUpdateInner>, ApplicationResourceUpdateInner>() {
            @Override
            public ApplicationResourceUpdateInner call(ServiceResponse<ApplicationResourceUpdateInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a Service Fabric application resource.
     * Update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource for patch operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ApplicationResourceUpdateInner>> updateWithServiceResponseAsync(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceUpdateInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2017-07-01-preview";
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, clusterName, applicationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ApplicationResourceUpdateInner>() { }.getType());
    }

    /**
     * Updates a Service Fabric application resource.
     * Update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource for patch operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationResourceUpdateInner object if successful.
     */
    public ApplicationResourceUpdateInner beginUpdate(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceUpdateInner parameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, clusterName, applicationName, parameters).toBlocking().single().body();
    }

    /**
     * Updates a Service Fabric application resource.
     * Update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource for patch operations.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationResourceUpdateInner> beginUpdateAsync(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceUpdateInner parameters, final ServiceCallback<ApplicationResourceUpdateInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, clusterName, applicationName, parameters), serviceCallback);
    }

    /**
     * Updates a Service Fabric application resource.
     * Update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource for patch operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationResourceUpdateInner object
     */
    public Observable<ApplicationResourceUpdateInner> beginUpdateAsync(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceUpdateInner parameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, clusterName, applicationName, parameters).map(new Func1<ServiceResponse<ApplicationResourceUpdateInner>, ApplicationResourceUpdateInner>() {
            @Override
            public ApplicationResourceUpdateInner call(ServiceResponse<ApplicationResourceUpdateInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a Service Fabric application resource.
     * Update a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource for patch operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationResourceUpdateInner object
     */
    public Observable<ServiceResponse<ApplicationResourceUpdateInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String clusterName, String applicationName, ApplicationResourceUpdateInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2017-07-01-preview";
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, clusterName, applicationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationResourceUpdateInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationResourceUpdateInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationResourceUpdateInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationResourceUpdateInner> beginUpdateDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationResourceUpdateInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<ApplicationResourceUpdateInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Deletes a Service Fabric application resource.
     * Delete a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String clusterName, String applicationName) {
        deleteWithServiceResponseAsync(resourceGroupName, clusterName, applicationName).toBlocking().last().body();
    }

    /**
     * Deletes a Service Fabric application resource.
     * Delete a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String clusterName, String applicationName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, clusterName, applicationName), serviceCallback);
    }

    /**
     * Deletes a Service Fabric application resource.
     * Delete a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String clusterName, String applicationName) {
        return deleteWithServiceResponseAsync(resourceGroupName, clusterName, applicationName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a Service Fabric application resource.
     * Delete a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String clusterName, String applicationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        final String apiVersion = "2017-07-01-preview";
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, clusterName, applicationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes a Service Fabric application resource.
     * Delete a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String clusterName, String applicationName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName, applicationName).toBlocking().single().body();
    }

    /**
     * Deletes a Service Fabric application resource.
     * Delete a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String clusterName, String applicationName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName, applicationName), serviceCallback);
    }

    /**
     * Deletes a Service Fabric application resource.
     * Delete a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String clusterName, String applicationName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName, applicationName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a Service Fabric application resource.
     * Delete a Service Fabric application resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String clusterName, String applicationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        final String apiVersion = "2017-07-01-preview";
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, clusterName, applicationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets the list of application resources created in the specified Service Fabric cluster resource.
     * Gets all application resources created or in the process of being created in the Service Fabric cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationResourceListInner object if successful.
     */
    public ApplicationResourceListInner list(String resourceGroupName, String clusterName) {
        return listWithServiceResponseAsync(resourceGroupName, clusterName).toBlocking().single().body();
    }

    /**
     * Gets the list of application resources created in the specified Service Fabric cluster resource.
     * Gets all application resources created or in the process of being created in the Service Fabric cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationResourceListInner> listAsync(String resourceGroupName, String clusterName, final ServiceCallback<ApplicationResourceListInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(resourceGroupName, clusterName), serviceCallback);
    }

    /**
     * Gets the list of application resources created in the specified Service Fabric cluster resource.
     * Gets all application resources created or in the process of being created in the Service Fabric cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationResourceListInner object
     */
    public Observable<ApplicationResourceListInner> listAsync(String resourceGroupName, String clusterName) {
        return listWithServiceResponseAsync(resourceGroupName, clusterName).map(new Func1<ServiceResponse<ApplicationResourceListInner>, ApplicationResourceListInner>() {
            @Override
            public ApplicationResourceListInner call(ServiceResponse<ApplicationResourceListInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the list of application resources created in the specified Service Fabric cluster resource.
     * Gets all application resources created or in the process of being created in the Service Fabric cluster resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationResourceListInner object
     */
    public Observable<ServiceResponse<ApplicationResourceListInner>> listWithServiceResponseAsync(String resourceGroupName, String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        final String apiVersion = "2017-07-01-preview";
        return service.list(this.client.subscriptionId(), resourceGroupName, clusterName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationResourceListInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationResourceListInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationResourceListInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationResourceListInner> listDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationResourceListInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApplicationResourceListInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

}
