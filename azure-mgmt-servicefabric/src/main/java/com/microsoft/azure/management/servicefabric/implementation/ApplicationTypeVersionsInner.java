/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabric.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.servicefabric.ErrorModelException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ApplicationTypeVersions.
 */
public class ApplicationTypeVersionsInner {
    /** The Retrofit service to perform REST calls. */
    private ApplicationTypeVersionsService service;
    /** The service client containing this operation class. */
    private ServiceFabricManagementClientImpl client;

    /**
     * Initializes an instance of ApplicationTypeVersionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ApplicationTypeVersionsInner(Retrofit retrofit, ServiceFabricManagementClientImpl client) {
        this.service = retrofit.create(ApplicationTypeVersionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ApplicationTypeVersions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ApplicationTypeVersionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.ApplicationTypeVersions get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationTypeName") String applicationTypeName, @Path("version") String version, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.ApplicationTypeVersions create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationTypeName") String applicationTypeName, @Path("version") String version, @Query("api-version") String apiVersion, @Body ApplicationTypeVersionResourceInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.ApplicationTypeVersions beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationTypeName") String applicationTypeName, @Path("version") String version, @Query("api-version") String apiVersion, @Body ApplicationTypeVersionResourceInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.ApplicationTypeVersions delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationTypeName") String applicationTypeName, @Path("version") String version, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.ApplicationTypeVersions beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationTypeName") String applicationTypeName, @Path("version") String version, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.ApplicationTypeVersions list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applicationTypes/{applicationTypeName}/versions")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationTypeName") String applicationTypeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets a Service Fabric application type version resource.
     * Get a Service Fabric application type version resource created or in the process of being created in the Service Fabric application type name resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationTypeVersionResourceInner object if successful.
     */
    public ApplicationTypeVersionResourceInner get(String resourceGroupName, String clusterName, String applicationTypeName, String version) {
        return getWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName, version).toBlocking().single().body();
    }

    /**
     * Gets a Service Fabric application type version resource.
     * Get a Service Fabric application type version resource created or in the process of being created in the Service Fabric application type name resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationTypeVersionResourceInner> getAsync(String resourceGroupName, String clusterName, String applicationTypeName, String version, final ServiceCallback<ApplicationTypeVersionResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName, version), serviceCallback);
    }

    /**
     * Gets a Service Fabric application type version resource.
     * Get a Service Fabric application type version resource created or in the process of being created in the Service Fabric application type name resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationTypeVersionResourceInner object
     */
    public Observable<ApplicationTypeVersionResourceInner> getAsync(String resourceGroupName, String clusterName, String applicationTypeName, String version) {
        return getWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName, version).map(new Func1<ServiceResponse<ApplicationTypeVersionResourceInner>, ApplicationTypeVersionResourceInner>() {
            @Override
            public ApplicationTypeVersionResourceInner call(ServiceResponse<ApplicationTypeVersionResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a Service Fabric application type version resource.
     * Get a Service Fabric application type version resource created or in the process of being created in the Service Fabric application type name resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationTypeVersionResourceInner object
     */
    public Observable<ServiceResponse<ApplicationTypeVersionResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String clusterName, String applicationTypeName, String version) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationTypeName == null) {
            throw new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null.");
        }
        if (version == null) {
            throw new IllegalArgumentException("Parameter version is required and cannot be null.");
        }
        final String apiVersion = "2017-07-01-preview";
        return service.get(this.client.subscriptionId(), resourceGroupName, clusterName, applicationTypeName, version, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationTypeVersionResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationTypeVersionResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationTypeVersionResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationTypeVersionResourceInner> getDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationTypeVersionResourceInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApplicationTypeVersionResourceInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Creates or updates a Service Fabric application type version resource.
     * Create or update a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationTypeVersionResourceInner object if successful.
     */
    public ApplicationTypeVersionResourceInner create(String resourceGroupName, String clusterName, String applicationTypeName, String version, ApplicationTypeVersionResourceInner parameters) {
        return createWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName, version, parameters).toBlocking().last().body();
    }

    /**
     * Creates or updates a Service Fabric application type version resource.
     * Create or update a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationTypeVersionResourceInner> createAsync(String resourceGroupName, String clusterName, String applicationTypeName, String version, ApplicationTypeVersionResourceInner parameters, final ServiceCallback<ApplicationTypeVersionResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName, version, parameters), serviceCallback);
    }

    /**
     * Creates or updates a Service Fabric application type version resource.
     * Create or update a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ApplicationTypeVersionResourceInner> createAsync(String resourceGroupName, String clusterName, String applicationTypeName, String version, ApplicationTypeVersionResourceInner parameters) {
        return createWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName, version, parameters).map(new Func1<ServiceResponse<ApplicationTypeVersionResourceInner>, ApplicationTypeVersionResourceInner>() {
            @Override
            public ApplicationTypeVersionResourceInner call(ServiceResponse<ApplicationTypeVersionResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a Service Fabric application type version resource.
     * Create or update a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ApplicationTypeVersionResourceInner>> createWithServiceResponseAsync(String resourceGroupName, String clusterName, String applicationTypeName, String version, ApplicationTypeVersionResourceInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationTypeName == null) {
            throw new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null.");
        }
        if (version == null) {
            throw new IllegalArgumentException("Parameter version is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2017-07-01-preview";
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, clusterName, applicationTypeName, version, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ApplicationTypeVersionResourceInner>() { }.getType());
    }

    /**
     * Creates or updates a Service Fabric application type version resource.
     * Create or update a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationTypeVersionResourceInner object if successful.
     */
    public ApplicationTypeVersionResourceInner beginCreate(String resourceGroupName, String clusterName, String applicationTypeName, String version, ApplicationTypeVersionResourceInner parameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName, version, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates a Service Fabric application type version resource.
     * Create or update a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationTypeVersionResourceInner> beginCreateAsync(String resourceGroupName, String clusterName, String applicationTypeName, String version, ApplicationTypeVersionResourceInner parameters, final ServiceCallback<ApplicationTypeVersionResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName, version, parameters), serviceCallback);
    }

    /**
     * Creates or updates a Service Fabric application type version resource.
     * Create or update a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationTypeVersionResourceInner object
     */
    public Observable<ApplicationTypeVersionResourceInner> beginCreateAsync(String resourceGroupName, String clusterName, String applicationTypeName, String version, ApplicationTypeVersionResourceInner parameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName, version, parameters).map(new Func1<ServiceResponse<ApplicationTypeVersionResourceInner>, ApplicationTypeVersionResourceInner>() {
            @Override
            public ApplicationTypeVersionResourceInner call(ServiceResponse<ApplicationTypeVersionResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a Service Fabric application type version resource.
     * Create or update a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationTypeVersionResourceInner object
     */
    public Observable<ServiceResponse<ApplicationTypeVersionResourceInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String clusterName, String applicationTypeName, String version, ApplicationTypeVersionResourceInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationTypeName == null) {
            throw new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null.");
        }
        if (version == null) {
            throw new IllegalArgumentException("Parameter version is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2017-07-01-preview";
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, clusterName, applicationTypeName, version, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationTypeVersionResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationTypeVersionResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationTypeVersionResourceInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationTypeVersionResourceInner> beginCreateDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationTypeVersionResourceInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<ApplicationTypeVersionResourceInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Deletes a Service Fabric application type version resource.
     * Delete a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String clusterName, String applicationTypeName, String version) {
        deleteWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName, version).toBlocking().last().body();
    }

    /**
     * Deletes a Service Fabric application type version resource.
     * Delete a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String clusterName, String applicationTypeName, String version, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName, version), serviceCallback);
    }

    /**
     * Deletes a Service Fabric application type version resource.
     * Delete a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String clusterName, String applicationTypeName, String version) {
        return deleteWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName, version).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a Service Fabric application type version resource.
     * Delete a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String clusterName, String applicationTypeName, String version) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationTypeName == null) {
            throw new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null.");
        }
        if (version == null) {
            throw new IllegalArgumentException("Parameter version is required and cannot be null.");
        }
        final String apiVersion = "2017-07-01-preview";
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, clusterName, applicationTypeName, version, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes a Service Fabric application type version resource.
     * Delete a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String clusterName, String applicationTypeName, String version) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName, version).toBlocking().single().body();
    }

    /**
     * Deletes a Service Fabric application type version resource.
     * Delete a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String clusterName, String applicationTypeName, String version, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName, version), serviceCallback);
    }

    /**
     * Deletes a Service Fabric application type version resource.
     * Delete a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String clusterName, String applicationTypeName, String version) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName, version).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a Service Fabric application type version resource.
     * Delete a Service Fabric application type version resource with the specified name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String clusterName, String applicationTypeName, String version) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationTypeName == null) {
            throw new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null.");
        }
        if (version == null) {
            throw new IllegalArgumentException("Parameter version is required and cannot be null.");
        }
        final String apiVersion = "2017-07-01-preview";
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, clusterName, applicationTypeName, version, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets the list of application type version resources created in the specified Service Fabric application type name resource.
     * Gets all application type version resources created or in the process of being created in the Service Fabric application type name resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationTypeVersionResourceListInner object if successful.
     */
    public ApplicationTypeVersionResourceListInner list(String resourceGroupName, String clusterName, String applicationTypeName) {
        return listWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName).toBlocking().single().body();
    }

    /**
     * Gets the list of application type version resources created in the specified Service Fabric application type name resource.
     * Gets all application type version resources created or in the process of being created in the Service Fabric application type name resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationTypeVersionResourceListInner> listAsync(String resourceGroupName, String clusterName, String applicationTypeName, final ServiceCallback<ApplicationTypeVersionResourceListInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName), serviceCallback);
    }

    /**
     * Gets the list of application type version resources created in the specified Service Fabric application type name resource.
     * Gets all application type version resources created or in the process of being created in the Service Fabric application type name resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationTypeVersionResourceListInner object
     */
    public Observable<ApplicationTypeVersionResourceListInner> listAsync(String resourceGroupName, String clusterName, String applicationTypeName) {
        return listWithServiceResponseAsync(resourceGroupName, clusterName, applicationTypeName).map(new Func1<ServiceResponse<ApplicationTypeVersionResourceListInner>, ApplicationTypeVersionResourceListInner>() {
            @Override
            public ApplicationTypeVersionResourceListInner call(ServiceResponse<ApplicationTypeVersionResourceListInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the list of application type version resources created in the specified Service Fabric application type name resource.
     * Gets all application type version resources created or in the process of being created in the Service Fabric application type name resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationTypeVersionResourceListInner object
     */
    public Observable<ServiceResponse<ApplicationTypeVersionResourceListInner>> listWithServiceResponseAsync(String resourceGroupName, String clusterName, String applicationTypeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationTypeName == null) {
            throw new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null.");
        }
        final String apiVersion = "2017-07-01-preview";
        return service.list(this.client.subscriptionId(), resourceGroupName, clusterName, applicationTypeName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationTypeVersionResourceListInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationTypeVersionResourceListInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationTypeVersionResourceListInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationTypeVersionResourceListInner> listDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationTypeVersionResourceListInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApplicationTypeVersionResourceListInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

}
