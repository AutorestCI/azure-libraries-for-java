/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabric.implementation;

import java.util.List;
import com.microsoft.azure.management.servicefabric.ApplicationParameter;
import com.microsoft.azure.management.servicefabric.ApplicationUpgradePolicy;
import com.microsoft.azure.management.servicefabric.ApplicationMetricDescription;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.servicefabric.ProxyResource;

/**
 * The application resource.
 */
@JsonFlatten
public class ApplicationResourceInner extends ProxyResource {
    /**
     * The version of the application type as defined in the application
     * manifest.
     */
    @JsonProperty(value = "properties.typeVersion")
    private String typeVersion;

    /**
     * List of application parameters with overridden values from their default
     * values specified in the application manifest.
     */
    @JsonProperty(value = "properties.parameters")
    private List<ApplicationParameter> parameters;

    /**
     * Describes the policy for a monitored application upgrade.
     */
    @JsonProperty(value = "properties.upgradePolicy")
    private ApplicationUpgradePolicy upgradePolicy;

    /**
     * The minimum number of nodes where Service Fabric will reserve capacity
     * for this application. Note that this does not mean that the services of
     * this application will be placed on all of those nodes. If this property
     * is set to zero, no capacity will be reserved. The value of this property
     * cannot be more than the value of the MaximumNodes property.
     */
    @JsonProperty(value = "properties.minimumNodes")
    private Long minimumNodes;

    /**
     * The maximum number of nodes where Service Fabric will reserve capacity
     * for this application. Note that this does not mean that the services of
     * this application will be placed on all of those nodes. By default, the
     * value of this property is zero and it means that the services can be
     * placed on any node.
     */
    @JsonProperty(value = "properties.maximumNodes")
    private Long maximumNodes;

    /**
     * Remove the current application capacity settings.
     */
    @JsonProperty(value = "properties.removeApplicationCapacity")
    private Boolean removeApplicationCapacity;

    /**
     * List of application capacity metric description.
     */
    @JsonProperty(value = "properties.metrics")
    private List<ApplicationMetricDescription> metrics;

    /**
     * The current deployment or provisioning state, which only appears in the
     * response.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /**
     * The application type name as defined in the application manifest.
     */
    @JsonProperty(value = "properties.typeName")
    private String typeName;

    /**
     * Get the typeVersion value.
     *
     * @return the typeVersion value
     */
    public String typeVersion() {
        return this.typeVersion;
    }

    /**
     * Set the typeVersion value.
     *
     * @param typeVersion the typeVersion value to set
     * @return the ApplicationResourceInner object itself.
     */
    public ApplicationResourceInner withTypeVersion(String typeVersion) {
        this.typeVersion = typeVersion;
        return this;
    }

    /**
     * Get the parameters value.
     *
     * @return the parameters value
     */
    public List<ApplicationParameter> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters value.
     *
     * @param parameters the parameters value to set
     * @return the ApplicationResourceInner object itself.
     */
    public ApplicationResourceInner withParameters(List<ApplicationParameter> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the upgradePolicy value.
     *
     * @return the upgradePolicy value
     */
    public ApplicationUpgradePolicy upgradePolicy() {
        return this.upgradePolicy;
    }

    /**
     * Set the upgradePolicy value.
     *
     * @param upgradePolicy the upgradePolicy value to set
     * @return the ApplicationResourceInner object itself.
     */
    public ApplicationResourceInner withUpgradePolicy(ApplicationUpgradePolicy upgradePolicy) {
        this.upgradePolicy = upgradePolicy;
        return this;
    }

    /**
     * Get the minimumNodes value.
     *
     * @return the minimumNodes value
     */
    public Long minimumNodes() {
        return this.minimumNodes;
    }

    /**
     * Set the minimumNodes value.
     *
     * @param minimumNodes the minimumNodes value to set
     * @return the ApplicationResourceInner object itself.
     */
    public ApplicationResourceInner withMinimumNodes(Long minimumNodes) {
        this.minimumNodes = minimumNodes;
        return this;
    }

    /**
     * Get the maximumNodes value.
     *
     * @return the maximumNodes value
     */
    public Long maximumNodes() {
        return this.maximumNodes;
    }

    /**
     * Set the maximumNodes value.
     *
     * @param maximumNodes the maximumNodes value to set
     * @return the ApplicationResourceInner object itself.
     */
    public ApplicationResourceInner withMaximumNodes(Long maximumNodes) {
        this.maximumNodes = maximumNodes;
        return this;
    }

    /**
     * Get the removeApplicationCapacity value.
     *
     * @return the removeApplicationCapacity value
     */
    public Boolean removeApplicationCapacity() {
        return this.removeApplicationCapacity;
    }

    /**
     * Set the removeApplicationCapacity value.
     *
     * @param removeApplicationCapacity the removeApplicationCapacity value to set
     * @return the ApplicationResourceInner object itself.
     */
    public ApplicationResourceInner withRemoveApplicationCapacity(Boolean removeApplicationCapacity) {
        this.removeApplicationCapacity = removeApplicationCapacity;
        return this;
    }

    /**
     * Get the metrics value.
     *
     * @return the metrics value
     */
    public List<ApplicationMetricDescription> metrics() {
        return this.metrics;
    }

    /**
     * Set the metrics value.
     *
     * @param metrics the metrics value to set
     * @return the ApplicationResourceInner object itself.
     */
    public ApplicationResourceInner withMetrics(List<ApplicationMetricDescription> metrics) {
        this.metrics = metrics;
        return this;
    }

    /**
     * Get the provisioningState value.
     *
     * @return the provisioningState value
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the typeName value.
     *
     * @return the typeName value
     */
    public String typeName() {
        return this.typeName;
    }

    /**
     * Set the typeName value.
     *
     * @param typeName the typeName value to set
     * @return the ApplicationResourceInner object itself.
     */
    public ApplicationResourceInner withTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }

}
