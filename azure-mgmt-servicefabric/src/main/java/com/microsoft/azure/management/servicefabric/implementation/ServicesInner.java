/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicefabric.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.servicefabric.ErrorModelException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Services.
 */
public class ServicesInner {
    /** The Retrofit service to perform REST calls. */
    private ServicesService service;
    /** The service client containing this operation class. */
    private ServiceFabricManagementClientImpl client;

    /**
     * Initializes an instance of ServicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ServicesInner(Retrofit retrofit, ServiceFabricManagementClientImpl client) {
        this.service = retrofit.create(ServicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Services to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ServicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Services get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services/{serviceName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationName") String applicationName, @Path("serviceName") String serviceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Services create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services/{serviceName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationName") String applicationName, @Path("serviceName") String serviceName, @Query("api-version") String apiVersion, @Body ServiceResourceInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Services beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services/{serviceName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationName") String applicationName, @Path("serviceName") String serviceName, @Query("api-version") String apiVersion, @Body ServiceResourceInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Services update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services/{serviceName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationName") String applicationName, @Path("serviceName") String serviceName, @Query("api-version") String apiVersion, @Body ServiceResourceUpdateInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Services beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services/{serviceName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationName") String applicationName, @Path("serviceName") String serviceName, @Query("api-version") String apiVersion, @Body ServiceResourceUpdateInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Services delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services/{serviceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationName") String applicationName, @Path("serviceName") String serviceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Services beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services/{serviceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationName") String applicationName, @Path("serviceName") String serviceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servicefabric.Services list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("applicationName") String applicationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets a Service Fabric service resource.
     * Get a Service Fabric service resource created or in the process of being created in the Service Fabric application resource.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServiceResourceInner object if successful.
     */
    public ServiceResourceInner get(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName).toBlocking().single().body();
    }

    /**
     * Gets a Service Fabric service resource.
     * Get a Service Fabric service resource created or in the process of being created in the Service Fabric application resource.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServiceResourceInner> getAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, final ServiceCallback<ServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName), serviceCallback);
    }

    /**
     * Gets a Service Fabric service resource.
     * Get a Service Fabric service resource created or in the process of being created in the Service Fabric application resource.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceResourceInner object
     */
    public Observable<ServiceResourceInner> getAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName).map(new Func1<ServiceResponse<ServiceResourceInner>, ServiceResourceInner>() {
            @Override
            public ServiceResourceInner call(ServiceResponse<ServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a Service Fabric service resource.
     * Get a Service Fabric service resource created or in the process of being created in the Service Fabric application resource.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceResourceInner object
     */
    public Observable<ServiceResponse<ServiceResourceInner>> getWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        final String apiVersion = "2017-07-01-preview";
        return service.get(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServiceResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ServiceResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServiceResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServiceResourceInner> getDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServiceResourceInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServiceResourceInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Creates or updates a Service Fabric service resource.
     * Create or update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServiceResourceInner object if successful.
     */
    public ServiceResourceInner create(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceInner parameters) {
        return createWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, parameters).toBlocking().last().body();
    }

    /**
     * Creates or updates a Service Fabric service resource.
     * Create or update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServiceResourceInner> createAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceInner parameters, final ServiceCallback<ServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a Service Fabric service resource.
     * Create or update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResourceInner> createAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceInner parameters) {
        return createWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, parameters).map(new Func1<ServiceResponse<ServiceResourceInner>, ServiceResourceInner>() {
            @Override
            public ServiceResourceInner call(ServiceResponse<ServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a Service Fabric service resource.
     * Create or update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ServiceResourceInner>> createWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceInner parameters) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2017-07-01-preview";
        Observable<Response<ResponseBody>> observable = service.create(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ServiceResourceInner>() { }.getType());
    }

    /**
     * Creates or updates a Service Fabric service resource.
     * Create or update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServiceResourceInner object if successful.
     */
    public ServiceResourceInner beginCreate(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceInner parameters) {
        return beginCreateWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates a Service Fabric service resource.
     * Create or update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServiceResourceInner> beginCreateAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceInner parameters, final ServiceCallback<ServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a Service Fabric service resource.
     * Create or update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceResourceInner object
     */
    public Observable<ServiceResourceInner> beginCreateAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceInner parameters) {
        return beginCreateWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, parameters).map(new Func1<ServiceResponse<ServiceResourceInner>, ServiceResourceInner>() {
            @Override
            public ServiceResourceInner call(ServiceResponse<ServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a Service Fabric service resource.
     * Create or update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceResourceInner object
     */
    public Observable<ServiceResponse<ServiceResourceInner>> beginCreateWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceInner parameters) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2017-07-01-preview";
        return service.beginCreate(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServiceResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ServiceResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServiceResourceInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServiceResourceInner> beginCreateDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServiceResourceInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<ServiceResourceInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Updates a Service Fabric service resource.
     * Update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource for patch operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServiceResourceUpdateInner object if successful.
     */
    public ServiceResourceUpdateInner update(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceUpdateInner parameters) {
        return updateWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, parameters).toBlocking().last().body();
    }

    /**
     * Updates a Service Fabric service resource.
     * Update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource for patch operations.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServiceResourceUpdateInner> updateAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceUpdateInner parameters, final ServiceCallback<ServiceResourceUpdateInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, parameters), serviceCallback);
    }

    /**
     * Updates a Service Fabric service resource.
     * Update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource for patch operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResourceUpdateInner> updateAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceUpdateInner parameters) {
        return updateWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, parameters).map(new Func1<ServiceResponse<ServiceResourceUpdateInner>, ServiceResourceUpdateInner>() {
            @Override
            public ServiceResourceUpdateInner call(ServiceResponse<ServiceResourceUpdateInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a Service Fabric service resource.
     * Update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource for patch operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ServiceResourceUpdateInner>> updateWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceUpdateInner parameters) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2017-07-01-preview";
        Observable<Response<ResponseBody>> observable = service.update(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ServiceResourceUpdateInner>() { }.getType());
    }

    /**
     * Updates a Service Fabric service resource.
     * Update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource for patch operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServiceResourceUpdateInner object if successful.
     */
    public ServiceResourceUpdateInner beginUpdate(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceUpdateInner parameters) {
        return beginUpdateWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, parameters).toBlocking().single().body();
    }

    /**
     * Updates a Service Fabric service resource.
     * Update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource for patch operations.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServiceResourceUpdateInner> beginUpdateAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceUpdateInner parameters, final ServiceCallback<ServiceResourceUpdateInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, parameters), serviceCallback);
    }

    /**
     * Updates a Service Fabric service resource.
     * Update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource for patch operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceResourceUpdateInner object
     */
    public Observable<ServiceResourceUpdateInner> beginUpdateAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceUpdateInner parameters) {
        return beginUpdateWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, parameters).map(new Func1<ServiceResponse<ServiceResourceUpdateInner>, ServiceResourceUpdateInner>() {
            @Override
            public ServiceResourceUpdateInner call(ServiceResponse<ServiceResourceUpdateInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a Service Fabric service resource.
     * Update a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param parameters The service resource for patch operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceResourceUpdateInner object
     */
    public Observable<ServiceResponse<ServiceResourceUpdateInner>> beginUpdateWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, ServiceResourceUpdateInner parameters) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2017-07-01-preview";
        return service.beginUpdate(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServiceResourceUpdateInner>>>() {
                @Override
                public Observable<ServiceResponse<ServiceResourceUpdateInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServiceResourceUpdateInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServiceResourceUpdateInner> beginUpdateDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServiceResourceUpdateInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<ServiceResourceUpdateInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Deletes a Service Fabric service resource.
     * Delete a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName) {
        deleteWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName).toBlocking().last().body();
    }

    /**
     * Deletes a Service Fabric service resource.
     * Delete a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName), serviceCallback);
    }

    /**
     * Deletes a Service Fabric service resource.
     * Delete a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName) {
        return deleteWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a Service Fabric service resource.
     * Delete a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        final String apiVersion = "2017-07-01-preview";
        Observable<Response<ResponseBody>> observable = service.delete(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes a Service Fabric service resource.
     * Delete a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName) {
        beginDeleteWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName).toBlocking().single().body();
    }

    /**
     * Deletes a Service Fabric service resource.
     * Delete a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName), serviceCallback);
    }

    /**
     * Deletes a Service Fabric service resource.
     * Delete a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName) {
        return beginDeleteWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a Service Fabric service resource.
     * Delete a Service Fabric service resource with the specified name.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, String serviceName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        final String apiVersion = "2017-07-01-preview";
        return service.beginDelete(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

    /**
     * Gets the list of service resources created in the specified Service Fabric application resource.
     * Gets all service resources created or in the process of being created in the Service Fabric application resource.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServiceResourceListInner object if successful.
     */
    public ServiceResourceListInner list(String subscriptionId, String resourceGroupName, String clusterName, String applicationName) {
        return listWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName).toBlocking().single().body();
    }

    /**
     * Gets the list of service resources created in the specified Service Fabric application resource.
     * Gets all service resources created or in the process of being created in the Service Fabric application resource.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServiceResourceListInner> listAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName, final ServiceCallback<ServiceResourceListInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName), serviceCallback);
    }

    /**
     * Gets the list of service resources created in the specified Service Fabric application resource.
     * Gets all service resources created or in the process of being created in the Service Fabric application resource.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceResourceListInner object
     */
    public Observable<ServiceResourceListInner> listAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName) {
        return listWithServiceResponseAsync(subscriptionId, resourceGroupName, clusterName, applicationName).map(new Func1<ServiceResponse<ServiceResourceListInner>, ServiceResourceListInner>() {
            @Override
            public ServiceResourceListInner call(ServiceResponse<ServiceResourceListInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the list of service resources created in the specified Service Fabric application resource.
     * Gets all service resources created or in the process of being created in the Service Fabric application resource.
     *
     * @param subscriptionId The customer subscription identifier.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceResourceListInner object
     */
    public Observable<ServiceResponse<ServiceResourceListInner>> listWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (applicationName == null) {
            throw new IllegalArgumentException("Parameter applicationName is required and cannot be null.");
        }
        final String apiVersion = "2017-07-01-preview";
        return service.list(subscriptionId, resourceGroupName, clusterName, applicationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServiceResourceListInner>>>() {
                @Override
                public Observable<ServiceResponse<ServiceResourceListInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServiceResourceListInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServiceResourceListInner> listDelegate(Response<ResponseBody> response) throws ErrorModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServiceResourceListInner, ErrorModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServiceResourceListInner>() { }.getType())
                .registerError(ErrorModelException.class)
                .build(response);
    }

}
