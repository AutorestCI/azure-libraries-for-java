/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.customvision.prediction.implementation;

import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureClient;
import com.microsoft.azure.AzureServiceClient;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.ImageUrl;
import com.microsoft.rest.credentials.ServiceClientCredentials;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.InputStream;
import java.io.IOException;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Multipart;
import retrofit2.http.Part;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the PredictionEndpointImpl class.
 */
public class PredictionEndpointImpl extends AzureServiceClient {
    /** The Retrofit service to perform REST calls. */
    private PredictionEndpointService service;
    /** the {@link AzureClient} used for long running operations. */
    private AzureClient azureClient;

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    public AzureClient getAzureClient() {
        return this.azureClient;
    }

    /**  */
    private String apiKey;

    /**
     * Gets
     *
     * @return the apiKey value.
     */
    public String apiKey() {
        return this.apiKey;
    }

    /**
     * Sets
     *
     * @param apiKey the apiKey value.
     * @return the service client itself
     */
    public PredictionEndpointImpl withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /** Gets or sets the preferred language for the response. */
    private String acceptLanguage;

    /**
     * Gets Gets or sets the preferred language for the response.
     *
     * @return the acceptLanguage value.
     */
    public String acceptLanguage() {
        return this.acceptLanguage;
    }

    /**
     * Sets Gets or sets the preferred language for the response.
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    public PredictionEndpointImpl withAcceptLanguage(String acceptLanguage) {
        this.acceptLanguage = acceptLanguage;
        return this;
    }

    /** Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30. */
    private int longRunningOperationRetryTimeout;

    /**
     * Gets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    public int longRunningOperationRetryTimeout() {
        return this.longRunningOperationRetryTimeout;
    }

    /**
     * Sets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    public PredictionEndpointImpl withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout) {
        this.longRunningOperationRetryTimeout = longRunningOperationRetryTimeout;
        return this;
    }

    /** When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true. */
    private boolean generateClientRequestId;

    /**
     * Gets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @return the generateClientRequestId value.
     */
    public boolean generateClientRequestId() {
        return this.generateClientRequestId;
    }

    /**
     * Sets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    public PredictionEndpointImpl withGenerateClientRequestId(boolean generateClientRequestId) {
        this.generateClientRequestId = generateClientRequestId;
        return this;
    }

    /**
     * Initializes an instance of PredictionEndpoint client.
     *
     * @param credentials the management credentials for Azure
     */
    public PredictionEndpointImpl(ServiceClientCredentials credentials) {
        this("https://southcentralus.api.cognitive.microsoft.com/customvision/v2.0/Prediction", credentials);
    }

    /**
     * Initializes an instance of PredictionEndpoint client.
     *
     * @param baseUrl the base URL of the host
     * @param credentials the management credentials for Azure
     */
    public PredictionEndpointImpl(String baseUrl, ServiceClientCredentials credentials) {
        super(baseUrl, credentials);
        initialize();
    }

    /**
     * Initializes an instance of PredictionEndpoint client.
     *
     * @param restClient the REST client to connect to Azure.
     */
    public PredictionEndpointImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    protected void initialize() {
        this.acceptLanguage = "en-US";
        this.longRunningOperationRetryTimeout = 30;
        this.generateClientRequestId = true;
        this.azureClient = new AzureClient(this);
        initializeService();
    }

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    @Override
    public String userAgent() {
        return String.format("%s (%s, %s)", super.userAgent(), "PredictionEndpoint", "2.0");
    }

    private void initializeService() {
        service = restClient().retrofit().create(PredictionEndpointService.class);
    }

    /**
     * The interface defining all the services for PredictionEndpoint to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PredictionEndpointService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.PredictionEndpoint predictImageUrl" })
        @POST("{projectId}/url")
        Observable<Response<ResponseBody>> predictImageUrl(@Path("projectId") UUID projectId, @Query("iterationId") UUID iterationId, @Query("application") String application, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Body ImageUrl imageUrl, @Header("User-Agent") String userAgent);

        @Multipart
        @POST("{projectId}/image")
        Observable<Response<ResponseBody>> predictImage(@Path("projectId") UUID projectId, @Query("iterationId") UUID iterationId, @Query("application") String application, @Part("imageData") RequestBody imageData, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.PredictionEndpoint predictImageUrlWithNoStore" })
        @POST("{projectId}/url/nostore")
        Observable<Response<ResponseBody>> predictImageUrlWithNoStore(@Path("projectId") UUID projectId, @Query("iterationId") UUID iterationId, @Query("application") String application, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Body ImageUrl imageUrl, @Header("User-Agent") String userAgent);

        @Multipart
        @POST("{projectId}/image/nostore")
        Observable<Response<ResponseBody>> predictImageWithNoStore(@Path("projectId") UUID projectId, @Query("iterationId") UUID iterationId, @Query("application") String application, @Part("imageData") RequestBody imageData, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Predict an image url and saves the result.
     *
     * @param projectId The project id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePredictionInner object if successful.
     */
    public ImagePredictionInner predictImageUrl(UUID projectId) {
        return predictImageUrlWithServiceResponseAsync(projectId).toBlocking().single().body();
    }

    /**
     * Predict an image url and saves the result.
     *
     * @param projectId The project id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePredictionInner> predictImageUrlAsync(UUID projectId, final ServiceCallback<ImagePredictionInner> serviceCallback) {
        return ServiceFuture.fromResponse(predictImageUrlWithServiceResponseAsync(projectId), serviceCallback);
    }

    /**
     * Predict an image url and saves the result.
     *
     * @param projectId The project id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ImagePredictionInner> predictImageUrlAsync(UUID projectId) {
        return predictImageUrlWithServiceResponseAsync(projectId).map(new Func1<ServiceResponse<ImagePredictionInner>, ImagePredictionInner>() {
            @Override
            public ImagePredictionInner call(ServiceResponse<ImagePredictionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Predict an image url and saves the result.
     *
     * @param projectId The project id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ServiceResponse<ImagePredictionInner>> predictImageUrlWithServiceResponseAsync(UUID projectId) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final UUID iterationId = null;
        final String application = null;
        final String url = null;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(null);
        return service.predictImageUrl(projectId, iterationId, application, this.apiKey(), this.acceptLanguage(), imageUrl, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePredictionInner>>>() {
                @Override
                public Observable<ServiceResponse<ImagePredictionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePredictionInner> clientResponse = predictImageUrlDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Predict an image url and saves the result.
     *
     * @param projectId The project id
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @param url the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePredictionInner object if successful.
     */
    public ImagePredictionInner predictImageUrl(UUID projectId, UUID iterationId, String application, String url) {
        return predictImageUrlWithServiceResponseAsync(projectId, iterationId, application, url).toBlocking().single().body();
    }

    /**
     * Predict an image url and saves the result.
     *
     * @param projectId The project id
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @param url the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePredictionInner> predictImageUrlAsync(UUID projectId, UUID iterationId, String application, String url, final ServiceCallback<ImagePredictionInner> serviceCallback) {
        return ServiceFuture.fromResponse(predictImageUrlWithServiceResponseAsync(projectId, iterationId, application, url), serviceCallback);
    }

    /**
     * Predict an image url and saves the result.
     *
     * @param projectId The project id
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @param url the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ImagePredictionInner> predictImageUrlAsync(UUID projectId, UUID iterationId, String application, String url) {
        return predictImageUrlWithServiceResponseAsync(projectId, iterationId, application, url).map(new Func1<ServiceResponse<ImagePredictionInner>, ImagePredictionInner>() {
            @Override
            public ImagePredictionInner call(ServiceResponse<ImagePredictionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Predict an image url and saves the result.
     *
     * @param projectId The project id
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @param url the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ServiceResponse<ImagePredictionInner>> predictImageUrlWithServiceResponseAsync(UUID projectId, UUID iterationId, String application, String url) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        return service.predictImageUrl(projectId, iterationId, application, this.apiKey(), this.acceptLanguage(), imageUrl, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePredictionInner>>>() {
                @Override
                public Observable<ServiceResponse<ImagePredictionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePredictionInner> clientResponse = predictImageUrlDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePredictionInner> predictImageUrlDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ImagePredictionInner, CloudException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ImagePredictionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Predict an image and saves the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePredictionInner object if successful.
     */
    public ImagePredictionInner predictImage(UUID projectId, byte[] imageData) {
        return predictImageWithServiceResponseAsync(projectId, imageData).toBlocking().single().body();
    }

    /**
     * Predict an image and saves the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePredictionInner> predictImageAsync(UUID projectId, byte[] imageData, final ServiceCallback<ImagePredictionInner> serviceCallback) {
        return ServiceFuture.fromResponse(predictImageWithServiceResponseAsync(projectId, imageData), serviceCallback);
    }

    /**
     * Predict an image and saves the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ImagePredictionInner> predictImageAsync(UUID projectId, byte[] imageData) {
        return predictImageWithServiceResponseAsync(projectId, imageData).map(new Func1<ServiceResponse<ImagePredictionInner>, ImagePredictionInner>() {
            @Override
            public ImagePredictionInner call(ServiceResponse<ImagePredictionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Predict an image and saves the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ServiceResponse<ImagePredictionInner>> predictImageWithServiceResponseAsync(UUID projectId, byte[] imageData) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final UUID iterationId = null;
        final String application = null;
        RequestBody imageDataConverted = RequestBody.create(MediaType.parse("multipart/form-data"), imageData);
        return service.predictImage(projectId, iterationId, application, imageDataConverted, this.apiKey(), this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePredictionInner>>>() {
                @Override
                public Observable<ServiceResponse<ImagePredictionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePredictionInner> clientResponse = predictImageDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Predict an image and saves the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePredictionInner object if successful.
     */
    public ImagePredictionInner predictImage(UUID projectId, byte[] imageData, UUID iterationId, String application) {
        return predictImageWithServiceResponseAsync(projectId, imageData, iterationId, application).toBlocking().single().body();
    }

    /**
     * Predict an image and saves the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePredictionInner> predictImageAsync(UUID projectId, byte[] imageData, UUID iterationId, String application, final ServiceCallback<ImagePredictionInner> serviceCallback) {
        return ServiceFuture.fromResponse(predictImageWithServiceResponseAsync(projectId, imageData, iterationId, application), serviceCallback);
    }

    /**
     * Predict an image and saves the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ImagePredictionInner> predictImageAsync(UUID projectId, byte[] imageData, UUID iterationId, String application) {
        return predictImageWithServiceResponseAsync(projectId, imageData, iterationId, application).map(new Func1<ServiceResponse<ImagePredictionInner>, ImagePredictionInner>() {
            @Override
            public ImagePredictionInner call(ServiceResponse<ImagePredictionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Predict an image and saves the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ServiceResponse<ImagePredictionInner>> predictImageWithServiceResponseAsync(UUID projectId, byte[] imageData, UUID iterationId, String application) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        RequestBody imageDataConverted = RequestBody.create(MediaType.parse("multipart/form-data"), imageData);
        return service.predictImage(projectId, iterationId, application, imageDataConverted, this.apiKey(), this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePredictionInner>>>() {
                @Override
                public Observable<ServiceResponse<ImagePredictionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePredictionInner> clientResponse = predictImageDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePredictionInner> predictImageDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ImagePredictionInner, CloudException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ImagePredictionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Predict an image url without saving the result.
     *
     * @param projectId The project id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePredictionInner object if successful.
     */
    public ImagePredictionInner predictImageUrlWithNoStore(UUID projectId) {
        return predictImageUrlWithNoStoreWithServiceResponseAsync(projectId).toBlocking().single().body();
    }

    /**
     * Predict an image url without saving the result.
     *
     * @param projectId The project id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePredictionInner> predictImageUrlWithNoStoreAsync(UUID projectId, final ServiceCallback<ImagePredictionInner> serviceCallback) {
        return ServiceFuture.fromResponse(predictImageUrlWithNoStoreWithServiceResponseAsync(projectId), serviceCallback);
    }

    /**
     * Predict an image url without saving the result.
     *
     * @param projectId The project id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ImagePredictionInner> predictImageUrlWithNoStoreAsync(UUID projectId) {
        return predictImageUrlWithNoStoreWithServiceResponseAsync(projectId).map(new Func1<ServiceResponse<ImagePredictionInner>, ImagePredictionInner>() {
            @Override
            public ImagePredictionInner call(ServiceResponse<ImagePredictionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Predict an image url without saving the result.
     *
     * @param projectId The project id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ServiceResponse<ImagePredictionInner>> predictImageUrlWithNoStoreWithServiceResponseAsync(UUID projectId) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final UUID iterationId = null;
        final String application = null;
        final String url = null;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(null);
        return service.predictImageUrlWithNoStore(projectId, iterationId, application, this.apiKey(), this.acceptLanguage(), imageUrl, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePredictionInner>>>() {
                @Override
                public Observable<ServiceResponse<ImagePredictionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePredictionInner> clientResponse = predictImageUrlWithNoStoreDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Predict an image url without saving the result.
     *
     * @param projectId The project id
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @param url the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePredictionInner object if successful.
     */
    public ImagePredictionInner predictImageUrlWithNoStore(UUID projectId, UUID iterationId, String application, String url) {
        return predictImageUrlWithNoStoreWithServiceResponseAsync(projectId, iterationId, application, url).toBlocking().single().body();
    }

    /**
     * Predict an image url without saving the result.
     *
     * @param projectId The project id
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @param url the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePredictionInner> predictImageUrlWithNoStoreAsync(UUID projectId, UUID iterationId, String application, String url, final ServiceCallback<ImagePredictionInner> serviceCallback) {
        return ServiceFuture.fromResponse(predictImageUrlWithNoStoreWithServiceResponseAsync(projectId, iterationId, application, url), serviceCallback);
    }

    /**
     * Predict an image url without saving the result.
     *
     * @param projectId The project id
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @param url the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ImagePredictionInner> predictImageUrlWithNoStoreAsync(UUID projectId, UUID iterationId, String application, String url) {
        return predictImageUrlWithNoStoreWithServiceResponseAsync(projectId, iterationId, application, url).map(new Func1<ServiceResponse<ImagePredictionInner>, ImagePredictionInner>() {
            @Override
            public ImagePredictionInner call(ServiceResponse<ImagePredictionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Predict an image url without saving the result.
     *
     * @param projectId The project id
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @param url the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ServiceResponse<ImagePredictionInner>> predictImageUrlWithNoStoreWithServiceResponseAsync(UUID projectId, UUID iterationId, String application, String url) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        return service.predictImageUrlWithNoStore(projectId, iterationId, application, this.apiKey(), this.acceptLanguage(), imageUrl, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePredictionInner>>>() {
                @Override
                public Observable<ServiceResponse<ImagePredictionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePredictionInner> clientResponse = predictImageUrlWithNoStoreDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePredictionInner> predictImageUrlWithNoStoreDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ImagePredictionInner, CloudException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ImagePredictionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Predict an image without saving the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePredictionInner object if successful.
     */
    public ImagePredictionInner predictImageWithNoStore(UUID projectId, byte[] imageData) {
        return predictImageWithNoStoreWithServiceResponseAsync(projectId, imageData).toBlocking().single().body();
    }

    /**
     * Predict an image without saving the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePredictionInner> predictImageWithNoStoreAsync(UUID projectId, byte[] imageData, final ServiceCallback<ImagePredictionInner> serviceCallback) {
        return ServiceFuture.fromResponse(predictImageWithNoStoreWithServiceResponseAsync(projectId, imageData), serviceCallback);
    }

    /**
     * Predict an image without saving the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ImagePredictionInner> predictImageWithNoStoreAsync(UUID projectId, byte[] imageData) {
        return predictImageWithNoStoreWithServiceResponseAsync(projectId, imageData).map(new Func1<ServiceResponse<ImagePredictionInner>, ImagePredictionInner>() {
            @Override
            public ImagePredictionInner call(ServiceResponse<ImagePredictionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Predict an image without saving the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ServiceResponse<ImagePredictionInner>> predictImageWithNoStoreWithServiceResponseAsync(UUID projectId, byte[] imageData) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final UUID iterationId = null;
        final String application = null;
        RequestBody imageDataConverted = RequestBody.create(MediaType.parse("multipart/form-data"), imageData);
        return service.predictImageWithNoStore(projectId, iterationId, application, imageDataConverted, this.apiKey(), this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePredictionInner>>>() {
                @Override
                public Observable<ServiceResponse<ImagePredictionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePredictionInner> clientResponse = predictImageWithNoStoreDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Predict an image without saving the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePredictionInner object if successful.
     */
    public ImagePredictionInner predictImageWithNoStore(UUID projectId, byte[] imageData, UUID iterationId, String application) {
        return predictImageWithNoStoreWithServiceResponseAsync(projectId, imageData, iterationId, application).toBlocking().single().body();
    }

    /**
     * Predict an image without saving the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePredictionInner> predictImageWithNoStoreAsync(UUID projectId, byte[] imageData, UUID iterationId, String application, final ServiceCallback<ImagePredictionInner> serviceCallback) {
        return ServiceFuture.fromResponse(predictImageWithNoStoreWithServiceResponseAsync(projectId, imageData, iterationId, application), serviceCallback);
    }

    /**
     * Predict an image without saving the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ImagePredictionInner> predictImageWithNoStoreAsync(UUID projectId, byte[] imageData, UUID iterationId, String application) {
        return predictImageWithNoStoreWithServiceResponseAsync(projectId, imageData, iterationId, application).map(new Func1<ServiceResponse<ImagePredictionInner>, ImagePredictionInner>() {
            @Override
            public ImagePredictionInner call(ServiceResponse<ImagePredictionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Predict an image without saving the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePredictionInner object
     */
    public Observable<ServiceResponse<ImagePredictionInner>> predictImageWithNoStoreWithServiceResponseAsync(UUID projectId, byte[] imageData, UUID iterationId, String application) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        RequestBody imageDataConverted = RequestBody.create(MediaType.parse("multipart/form-data"), imageData);
        return service.predictImageWithNoStore(projectId, iterationId, application, imageDataConverted, this.apiKey(), this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePredictionInner>>>() {
                @Override
                public Observable<ServiceResponse<ImagePredictionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePredictionInner> clientResponse = predictImageWithNoStoreDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePredictionInner> predictImageWithNoStoreDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ImagePredictionInner, CloudException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ImagePredictionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
